plugins {
    id 'application'
    id 'org.beryx.jlink' version '3.0.1'
    id 'org.jetbrains.kotlin.jvm' version '2.2.0'
}

repositories {
    mavenCentral()
}

dependencies {
    // Log4j2 BOM to manage versions consistently
    implementation platform('org.apache.logging.log4j:log4j-bom:2.25.0')
    
    // Log4j2 dependencies (versions managed by BOM)
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'

    // Apache Commons CSV library
    implementation 'org.apache.commons:commons-csv:1.10.0'

    // HTTP client for YNAB API requests
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.2.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0'

    // JSON serialization/deserialization
    implementation 'com.google.code.gson:gson:2.13.1'


    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation libs.guava

}



java {
    modularity.inferModulePath = true
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
        // Vendor can be specified if needed
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

application {
    mainClass = 'ch.orthogonal.yuhnab.Main'
    mainModule = 'yuhnab'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Configure Badass JLink Plugin for Docker-like CLI installation
jlink {
    options = ['--strip-debug', '--compress', 'zip-6', '--no-header-files', '--no-man-pages']

    forceMerge 'kotlin'
    // Remove hardcoded path - let toolchain handle it
    // javaHome = '/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Home'
    
    launcher {
        name = 'yuhnab'
    }

    jpackage {
        forceMerge 'org.apache.logging.log4j.core'
        // App will be installed in /Applications
        imageName = 'yuhnab'
        installerName = 'yuhnab-installer'
        installerType = 'pkg'
        skipInstaller = false
        appVersion = '1.0.0'
        
        
        // macOS specific options with resource directory for scripts
        installerOptions = [
            '--mac-package-identifier', 'ch.orthogonal.yuhnab',
            '--mac-package-name', 'yuhnab',
            '--install-dir', '/Applications',
            '--resource-dir', 'src/main/resources/package'
        ]
        
        // Optional: Add icon for the app bundle
        // icon = 'src/main/resources/icon.icns'
    }
}

// Create custom runtime image task (alternative approach)
tasks.register('createRuntimeImage') {
    dependsOn 'jlinkZip'
    doLast {
        println "Runtime image created. You can distribute this as a simple archive."
    }
}

// Debug task to show Java configuration
tasks.register('showJavaConfig') {
    doLast {
        println "Java Home: ${System.getProperty('java.home')}"
        println "Java Version: ${System.getProperty('java.version')}"
        println "Gradle Java Toolchain: ${java.toolchain.languageVersion.get()}"
        
        def jmodsDir = new File("${System.getProperty('java.home')}/jmods")
        println "JMods directory exists: ${jmodsDir.exists()}"
        if (jmodsDir.exists()) {
            println "JMods directory: ${jmodsDir.absolutePath}"
            println "JMods files: ${jmodsDir.list()?.take(5)}"
        }
    }
}


// Task to prepare package resources
tasks.register('preparePackageResources') {
    doLast {
        def resourceDir = file('src/main/resources/package')
        resourceDir.mkdirs()
        
        // This will be handled in step-by-step instructions
        println "Package resources directory created: ${resourceDir.absolutePath}"
    }
}

tasks.register('debugModules') {
    doLast {
        configurations.runtimeClasspath.files.forEach { file ->
            if (file.name.contains('log4j')) {
                println "Log4j JAR: ${file.name}"
                if (file.name.endsWith('.jar')) {
                    def jarFile = new java.util.jar.JarFile(file)
                    def moduleInfo = jarFile.getEntry('module-info.class')
                    if (moduleInfo) {
                        println "  - Has module-info.class"
                    } else {
                        println "  - Automatic module"
                    }
                    
                    // Check for service providers
                    def servicesDir = jarFile.entries().findAll { 
                        it.name.startsWith('META-INF/services/') 
                    }
                    if (!servicesDir.isEmpty()) {
                        println "  - Service providers found:"
                        servicesDir.each { entry ->
                            println "    ${entry.name}"
                        }
                    }
                    jarFile.close()
                }
            }
        }
    }
}