/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.ynab_api_client.client.api;

import com.example.ynab_api_client.client.invoker.ApiClient;
import com.example.ynab_api_client.client.invoker.ApiException;
import com.example.ynab_api_client.client.invoker.ApiResponse;
import com.example.ynab_api_client.client.invoker.Configuration;
import com.example.ynab_api_client.client.invoker.Pair;

import com.example.ynab_api_client.client.model.ErrorResponse;
import com.example.ynab_api_client.client.model.PayeeLocationResponse;
import com.example.ynab_api_client.client.model.PayeeLocationsResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class PayeeLocationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PayeeLocationsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PayeeLocationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Single payee location
   * Returns a single payee location
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param payeeLocationId id of payee location (required)
   * @return PayeeLocationResponse
   * @throws ApiException if fails to make API call
   */
  public PayeeLocationResponse getPayeeLocationById(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String payeeLocationId) throws ApiException {
    ApiResponse<PayeeLocationResponse> localVarResponse = getPayeeLocationByIdWithHttpInfo(budgetId, payeeLocationId);
    return localVarResponse.getData();
  }

  /**
   * Single payee location
   * Returns a single payee location
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param payeeLocationId id of payee location (required)
   * @return ApiResponse&lt;PayeeLocationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PayeeLocationResponse> getPayeeLocationByIdWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String payeeLocationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPayeeLocationByIdRequestBuilder(budgetId, payeeLocationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPayeeLocationById", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PayeeLocationResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PayeeLocationResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PayeeLocationResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPayeeLocationByIdRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String payeeLocationId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getPayeeLocationById");
    }
    // verify the required parameter 'payeeLocationId' is set
    if (payeeLocationId == null) {
      throw new ApiException(400, "Missing the required parameter 'payeeLocationId' when calling getPayeeLocationById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/payee_locations/{payee_location_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{payee_location_id}", ApiClient.urlEncode(payeeLocationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List payee locations
   * Returns all payee locations
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @return PayeeLocationsResponse
   * @throws ApiException if fails to make API call
   */
  public PayeeLocationsResponse getPayeeLocations(@jakarta.annotation.Nonnull String budgetId) throws ApiException {
    ApiResponse<PayeeLocationsResponse> localVarResponse = getPayeeLocationsWithHttpInfo(budgetId);
    return localVarResponse.getData();
  }

  /**
   * List payee locations
   * Returns all payee locations
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @return ApiResponse&lt;PayeeLocationsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PayeeLocationsResponse> getPayeeLocationsWithHttpInfo(@jakarta.annotation.Nonnull String budgetId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPayeeLocationsRequestBuilder(budgetId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPayeeLocations", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PayeeLocationsResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PayeeLocationsResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PayeeLocationsResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPayeeLocationsRequestBuilder(@jakarta.annotation.Nonnull String budgetId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getPayeeLocations");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/payee_locations"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List locations for a payee
   * Returns all payee locations for a specified payee
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param payeeId id of payee (required)
   * @return PayeeLocationsResponse
   * @throws ApiException if fails to make API call
   */
  public PayeeLocationsResponse getPayeeLocationsByPayee(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String payeeId) throws ApiException {
    ApiResponse<PayeeLocationsResponse> localVarResponse = getPayeeLocationsByPayeeWithHttpInfo(budgetId, payeeId);
    return localVarResponse.getData();
  }

  /**
   * List locations for a payee
   * Returns all payee locations for a specified payee
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param payeeId id of payee (required)
   * @return ApiResponse&lt;PayeeLocationsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PayeeLocationsResponse> getPayeeLocationsByPayeeWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String payeeId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPayeeLocationsByPayeeRequestBuilder(budgetId, payeeId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPayeeLocationsByPayee", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PayeeLocationsResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PayeeLocationsResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PayeeLocationsResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPayeeLocationsByPayeeRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String payeeId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getPayeeLocationsByPayee");
    }
    // verify the required parameter 'payeeId' is set
    if (payeeId == null) {
      throw new ApiException(400, "Missing the required parameter 'payeeId' when calling getPayeeLocationsByPayee");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/payees/{payee_id}/payee_locations"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{payee_id}", ApiClient.urlEncode(payeeId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
