/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.example.ynab_api_client.client.model.SaveSubTransaction;
import com.example.ynab_api_client.client.model.TransactionClearedStatus;
import com.example.ynab_api_client.client.model.TransactionFlagColor;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * NewTransaction
 */
@JsonPropertyOrder({
  NewTransaction.JSON_PROPERTY_ACCOUNT_ID,
  NewTransaction.JSON_PROPERTY_DATE,
  NewTransaction.JSON_PROPERTY_AMOUNT,
  NewTransaction.JSON_PROPERTY_PAYEE_ID,
  NewTransaction.JSON_PROPERTY_PAYEE_NAME,
  NewTransaction.JSON_PROPERTY_CATEGORY_ID,
  NewTransaction.JSON_PROPERTY_MEMO,
  NewTransaction.JSON_PROPERTY_CLEARED,
  NewTransaction.JSON_PROPERTY_APPROVED,
  NewTransaction.JSON_PROPERTY_FLAG_COLOR,
  NewTransaction.JSON_PROPERTY_SUBTRANSACTIONS,
  NewTransaction.JSON_PROPERTY_IMPORT_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class NewTransaction {
  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  @jakarta.annotation.Nullable
  private UUID accountId;

  public static final String JSON_PROPERTY_DATE = "date";
  @jakarta.annotation.Nullable
  private LocalDate date;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nullable
  private Long amount;

  public static final String JSON_PROPERTY_PAYEE_ID = "payee_id";
  private JsonNullable<UUID> payeeId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_PAYEE_NAME = "payee_name";
  private JsonNullable<String> payeeName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CATEGORY_ID = "category_id";
  private JsonNullable<UUID> categoryId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_MEMO = "memo";
  private JsonNullable<String> memo = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CLEARED = "cleared";
  @jakarta.annotation.Nullable
  private TransactionClearedStatus cleared;

  public static final String JSON_PROPERTY_APPROVED = "approved";
  @jakarta.annotation.Nullable
  private Boolean approved;

  public static final String JSON_PROPERTY_FLAG_COLOR = "flag_color";
  private JsonNullable<TransactionFlagColor> flagColor = JsonNullable.<TransactionFlagColor>undefined();

  public static final String JSON_PROPERTY_SUBTRANSACTIONS = "subtransactions";
  @jakarta.annotation.Nullable
  private List<SaveSubTransaction> subtransactions = new ArrayList<>();

  public static final String JSON_PROPERTY_IMPORT_ID = "import_id";
  private JsonNullable<String> importId = JsonNullable.<String>undefined();

  public NewTransaction() { 
  }

  public NewTransaction accountId(@jakarta.annotation.Nullable UUID accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountId(@jakarta.annotation.Nullable UUID accountId) {
    this.accountId = accountId;
  }


  public NewTransaction date(@jakarta.annotation.Nullable LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
   * @return date
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LocalDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(@jakarta.annotation.Nullable LocalDate date) {
    this.date = date;
  }


  public NewTransaction amount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
   * @return amount
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
  }


  public NewTransaction payeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
    return this;
  }

  /**
   * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as &#x60;transfer_payee_id&#x60; on the account resource.
   * @return payeeId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getPayeeId() {
        return payeeId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getPayeeId_JsonNullable() {
    return payeeId;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  public void setPayeeId_JsonNullable(JsonNullable<UUID> payeeId) {
    this.payeeId = payeeId;
  }

  public void setPayeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
  }


  public NewTransaction payeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
    return this;
  }

  /**
   * The payee name.  If a &#x60;payee_name&#x60; value is provided and &#x60;payee_id&#x60; has a null value, the &#x60;payee_name&#x60; value will be used to resolve the payee by either (1) a matching payee rename rule (only if &#x60;import_id&#x60; is also specified) or (2) a payee with the same name or (3) creation of a new payee.
   * @return payeeName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getPayeeName() {
        return payeeName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPayeeName_JsonNullable() {
    return payeeName;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  public void setPayeeName_JsonNullable(JsonNullable<String> payeeName) {
    this.payeeName = payeeName;
  }

  public void setPayeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
  }


  public NewTransaction categoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
    return this;
  }

  /**
   * The category for the transaction.  To configure a split transaction, you can specify null for &#x60;category_id&#x60; and provide a &#x60;subtransactions&#x60; array as part of the transaction object.  If an existing transaction is a split, the &#x60;category_id&#x60; cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
   * @return categoryId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getCategoryId() {
        return categoryId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getCategoryId_JsonNullable() {
    return categoryId;
  }
  
  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  public void setCategoryId_JsonNullable(JsonNullable<UUID> categoryId) {
    this.categoryId = categoryId;
  }

  public void setCategoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
  }


  public NewTransaction memo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getMemo() {
        return memo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMemo_JsonNullable() {
    return memo;
  }
  
  @JsonProperty(JSON_PROPERTY_MEMO)
  public void setMemo_JsonNullable(JsonNullable<String> memo) {
    this.memo = memo;
  }

  public void setMemo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
  }


  public NewTransaction cleared(@jakarta.annotation.Nullable TransactionClearedStatus cleared) {
    this.cleared = cleared;
    return this;
  }

  /**
   * Get cleared
   * @return cleared
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLEARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TransactionClearedStatus getCleared() {
    return cleared;
  }


  @JsonProperty(JSON_PROPERTY_CLEARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCleared(@jakarta.annotation.Nullable TransactionClearedStatus cleared) {
    this.cleared = cleared;
  }


  public NewTransaction approved(@jakarta.annotation.Nullable Boolean approved) {
    this.approved = approved;
    return this;
  }

  /**
   * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
   * @return approved
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPROVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getApproved() {
    return approved;
  }


  @JsonProperty(JSON_PROPERTY_APPROVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApproved(@jakarta.annotation.Nullable Boolean approved) {
    this.approved = approved;
  }


  public NewTransaction flagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
    return this;
  }

  /**
   * Get flagColor
   * @return flagColor
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public TransactionFlagColor getFlagColor() {
        return flagColor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TransactionFlagColor> getFlagColor_JsonNullable() {
    return flagColor;
  }
  
  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  public void setFlagColor_JsonNullable(JsonNullable<TransactionFlagColor> flagColor) {
    this.flagColor = flagColor;
  }

  public void setFlagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
  }


  public NewTransaction subtransactions(@jakarta.annotation.Nullable List<SaveSubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
    return this;
  }

  public NewTransaction addSubtransactionsItem(SaveSubTransaction subtransactionsItem) {
    if (this.subtransactions == null) {
      this.subtransactions = new ArrayList<>();
    }
    this.subtransactions.add(subtransactionsItem);
    return this;
  }

  /**
   * An array of subtransactions to configure a transaction as a split. Updating &#x60;subtransactions&#x60; on an existing split transaction is not supported.
   * @return subtransactions
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<SaveSubTransaction> getSubtransactions() {
    return subtransactions;
  }


  @JsonProperty(JSON_PROPERTY_SUBTRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubtransactions(@jakarta.annotation.Nullable List<SaveSubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
  }


  public NewTransaction importId(@jakarta.annotation.Nullable String importId) {
    this.importId = JsonNullable.<String>of(importId);
    return this;
  }

  /**
   * If specified, a new transaction will be assigned this &#x60;import_id&#x60; and considered \&quot;imported\&quot;.  We will also attempt to match this imported transaction to an existing \&quot;user-entered\&quot; transaction on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.&lt;br&gt;&lt;br&gt;Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: &#39;YNAB:[milliunit_amount]:[iso_date]:[occurrence]&#39;. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of &#39;YNAB:-294230:2015-12-30:1&#39;.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be &#39;YNAB:-294230:2015-12-30:2&#39;.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.&lt;br&gt;&lt;br&gt;If import_id is omitted or specified as null, the transaction will be treated as a \&quot;user-entered\&quot; transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
   * @return importId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getImportId() {
        return importId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getImportId_JsonNullable() {
    return importId;
  }
  
  @JsonProperty(JSON_PROPERTY_IMPORT_ID)
  public void setImportId_JsonNullable(JsonNullable<String> importId) {
    this.importId = importId;
  }

  public void setImportId(@jakarta.annotation.Nullable String importId) {
    this.importId = JsonNullable.<String>of(importId);
  }


  /**
   * Return true if this NewTransaction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewTransaction newTransaction = (NewTransaction) o;
    return Objects.equals(this.accountId, newTransaction.accountId) &&
        Objects.equals(this.date, newTransaction.date) &&
        Objects.equals(this.amount, newTransaction.amount) &&
        equalsNullable(this.payeeId, newTransaction.payeeId) &&
        equalsNullable(this.payeeName, newTransaction.payeeName) &&
        equalsNullable(this.categoryId, newTransaction.categoryId) &&
        equalsNullable(this.memo, newTransaction.memo) &&
        Objects.equals(this.cleared, newTransaction.cleared) &&
        Objects.equals(this.approved, newTransaction.approved) &&
        equalsNullable(this.flagColor, newTransaction.flagColor) &&
        Objects.equals(this.subtransactions, newTransaction.subtransactions) &&
        equalsNullable(this.importId, newTransaction.importId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, date, amount, hashCodeNullable(payeeId), hashCodeNullable(payeeName), hashCodeNullable(categoryId), hashCodeNullable(memo), cleared, approved, hashCodeNullable(flagColor), subtransactions, hashCodeNullable(importId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewTransaction {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    cleared: ").append(toIndentedString(cleared)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    flagColor: ").append(toIndentedString(flagColor)).append("\n");
    sb.append("    subtransactions: ").append(toIndentedString(subtransactions)).append("\n");
    sb.append("    importId: ").append(toIndentedString(importId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `account_id` to the URL query string
    if (getAccountId() != null) {
      joiner.add(String.format("%saccount_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAccountId()))));
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      joiner.add(String.format("%sdate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDate()))));
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(String.format("%samount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAmount()))));
    }

    // add `payee_id` to the URL query string
    if (getPayeeId() != null) {
      joiner.add(String.format("%spayee_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeId()))));
    }

    // add `payee_name` to the URL query string
    if (getPayeeName() != null) {
      joiner.add(String.format("%spayee_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeName()))));
    }

    // add `category_id` to the URL query string
    if (getCategoryId() != null) {
      joiner.add(String.format("%scategory_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryId()))));
    }

    // add `memo` to the URL query string
    if (getMemo() != null) {
      joiner.add(String.format("%smemo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMemo()))));
    }

    // add `cleared` to the URL query string
    if (getCleared() != null) {
      joiner.add(String.format("%scleared%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCleared()))));
    }

    // add `approved` to the URL query string
    if (getApproved() != null) {
      joiner.add(String.format("%sapproved%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getApproved()))));
    }

    // add `flag_color` to the URL query string
    if (getFlagColor() != null) {
      joiner.add(String.format("%sflag_color%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFlagColor()))));
    }

    // add `subtransactions` to the URL query string
    if (getSubtransactions() != null) {
      for (int i = 0; i < getSubtransactions().size(); i++) {
        if (getSubtransactions().get(i) != null) {
          joiner.add(getSubtransactions().get(i).toUrlQueryString(String.format("%ssubtransactions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `import_id` to the URL query string
    if (getImportId() != null) {
      joiner.add(String.format("%simport_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getImportId()))));
    }

    return joiner.toString();
  }
}

