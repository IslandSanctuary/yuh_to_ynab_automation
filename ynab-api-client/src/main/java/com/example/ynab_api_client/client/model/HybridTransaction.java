/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.example.ynab_api_client.client.model.TransactionClearedStatus;
import com.example.ynab_api_client.client.model.TransactionFlagColor;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * HybridTransaction
 */
@JsonPropertyOrder({
  HybridTransaction.JSON_PROPERTY_ID,
  HybridTransaction.JSON_PROPERTY_DATE,
  HybridTransaction.JSON_PROPERTY_AMOUNT,
  HybridTransaction.JSON_PROPERTY_MEMO,
  HybridTransaction.JSON_PROPERTY_CLEARED,
  HybridTransaction.JSON_PROPERTY_APPROVED,
  HybridTransaction.JSON_PROPERTY_FLAG_COLOR,
  HybridTransaction.JSON_PROPERTY_FLAG_NAME,
  HybridTransaction.JSON_PROPERTY_ACCOUNT_ID,
  HybridTransaction.JSON_PROPERTY_PAYEE_ID,
  HybridTransaction.JSON_PROPERTY_CATEGORY_ID,
  HybridTransaction.JSON_PROPERTY_TRANSFER_ACCOUNT_ID,
  HybridTransaction.JSON_PROPERTY_TRANSFER_TRANSACTION_ID,
  HybridTransaction.JSON_PROPERTY_MATCHED_TRANSACTION_ID,
  HybridTransaction.JSON_PROPERTY_IMPORT_ID,
  HybridTransaction.JSON_PROPERTY_IMPORT_PAYEE_NAME,
  HybridTransaction.JSON_PROPERTY_IMPORT_PAYEE_NAME_ORIGINAL,
  HybridTransaction.JSON_PROPERTY_DEBT_TRANSACTION_TYPE,
  HybridTransaction.JSON_PROPERTY_DELETED,
  HybridTransaction.JSON_PROPERTY_TYPE,
  HybridTransaction.JSON_PROPERTY_PARENT_TRANSACTION_ID,
  HybridTransaction.JSON_PROPERTY_ACCOUNT_NAME,
  HybridTransaction.JSON_PROPERTY_PAYEE_NAME,
  HybridTransaction.JSON_PROPERTY_CATEGORY_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class HybridTransaction {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_DATE = "date";
  @jakarta.annotation.Nonnull
  private LocalDate date;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nonnull
  private Long amount;

  public static final String JSON_PROPERTY_MEMO = "memo";
  private JsonNullable<String> memo = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CLEARED = "cleared";
  @jakarta.annotation.Nonnull
  private TransactionClearedStatus cleared;

  public static final String JSON_PROPERTY_APPROVED = "approved";
  @jakarta.annotation.Nonnull
  private Boolean approved;

  public static final String JSON_PROPERTY_FLAG_COLOR = "flag_color";
  private JsonNullable<TransactionFlagColor> flagColor = JsonNullable.<TransactionFlagColor>undefined();

  public static final String JSON_PROPERTY_FLAG_NAME = "flag_name";
  private JsonNullable<String> flagName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  @jakarta.annotation.Nonnull
  private UUID accountId;

  public static final String JSON_PROPERTY_PAYEE_ID = "payee_id";
  private JsonNullable<UUID> payeeId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_CATEGORY_ID = "category_id";
  private JsonNullable<UUID> categoryId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_TRANSFER_ACCOUNT_ID = "transfer_account_id";
  private JsonNullable<UUID> transferAccountId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_TRANSFER_TRANSACTION_ID = "transfer_transaction_id";
  private JsonNullable<String> transferTransactionId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MATCHED_TRANSACTION_ID = "matched_transaction_id";
  private JsonNullable<String> matchedTransactionId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IMPORT_ID = "import_id";
  private JsonNullable<String> importId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IMPORT_PAYEE_NAME = "import_payee_name";
  private JsonNullable<String> importPayeeName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IMPORT_PAYEE_NAME_ORIGINAL = "import_payee_name_original";
  private JsonNullable<String> importPayeeNameOriginal = JsonNullable.<String>undefined();

  /**
   * If the transaction is a debt/loan account transaction, the type of transaction
   */
  public enum DebtTransactionTypeEnum {
    PAYMENT(String.valueOf("payment")),
    
    REFUND(String.valueOf("refund")),
    
    FEE(String.valueOf("fee")),
    
    INTEREST(String.valueOf("interest")),
    
    ESCROW(String.valueOf("escrow")),
    
    BALANCE_ADJUSTMENT(String.valueOf("balanceAdjustment")),
    
    CREDIT(String.valueOf("credit")),
    
    CHARGE(String.valueOf("charge"));

    private String value;

    DebtTransactionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DebtTransactionTypeEnum fromValue(String value) {
      for (DebtTransactionTypeEnum b : DebtTransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_DEBT_TRANSACTION_TYPE = "debt_transaction_type";
  private JsonNullable<DebtTransactionTypeEnum> debtTransactionType = JsonNullable.<DebtTransactionTypeEnum>undefined();

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @jakarta.annotation.Nonnull
  private Boolean deleted;

  /**
   * Whether the hybrid transaction represents a regular transaction or a subtransaction
   */
  public enum TypeEnum {
    TRANSACTION(String.valueOf("transaction")),
    
    SUBTRANSACTION(String.valueOf("subtransaction"));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nonnull
  private TypeEnum type;

  public static final String JSON_PROPERTY_PARENT_TRANSACTION_ID = "parent_transaction_id";
  private JsonNullable<String> parentTransactionId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ACCOUNT_NAME = "account_name";
  @jakarta.annotation.Nonnull
  private String accountName;

  public static final String JSON_PROPERTY_PAYEE_NAME = "payee_name";
  private JsonNullable<String> payeeName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CATEGORY_NAME = "category_name";
  @jakarta.annotation.Nullable
  private String categoryName;

  public HybridTransaction() { 
  }

  public HybridTransaction id(@jakarta.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull String id) {
    this.id = id;
  }


  public HybridTransaction date(@jakarta.annotation.Nonnull LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * The transaction date in ISO format (e.g. 2016-12-01)
   * @return date
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LocalDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(@jakarta.annotation.Nonnull LocalDate date) {
    this.date = date;
  }


  public HybridTransaction amount(@jakarta.annotation.Nonnull Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transaction amount in milliunits format
   * @return amount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(@jakarta.annotation.Nonnull Long amount) {
    this.amount = amount;
  }


  public HybridTransaction memo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getMemo() {
        return memo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMemo_JsonNullable() {
    return memo;
  }
  
  @JsonProperty(JSON_PROPERTY_MEMO)
  public void setMemo_JsonNullable(JsonNullable<String> memo) {
    this.memo = memo;
  }

  public void setMemo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
  }


  public HybridTransaction cleared(@jakarta.annotation.Nonnull TransactionClearedStatus cleared) {
    this.cleared = cleared;
    return this;
  }

  /**
   * Get cleared
   * @return cleared
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLEARED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public TransactionClearedStatus getCleared() {
    return cleared;
  }


  @JsonProperty(JSON_PROPERTY_CLEARED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCleared(@jakarta.annotation.Nonnull TransactionClearedStatus cleared) {
    this.cleared = cleared;
  }


  public HybridTransaction approved(@jakarta.annotation.Nonnull Boolean approved) {
    this.approved = approved;
    return this;
  }

  /**
   * Whether or not the transaction is approved
   * @return approved
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_APPROVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getApproved() {
    return approved;
  }


  @JsonProperty(JSON_PROPERTY_APPROVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApproved(@jakarta.annotation.Nonnull Boolean approved) {
    this.approved = approved;
  }


  public HybridTransaction flagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
    return this;
  }

  /**
   * Get flagColor
   * @return flagColor
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public TransactionFlagColor getFlagColor() {
        return flagColor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TransactionFlagColor> getFlagColor_JsonNullable() {
    return flagColor;
  }
  
  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  public void setFlagColor_JsonNullable(JsonNullable<TransactionFlagColor> flagColor) {
    this.flagColor = flagColor;
  }

  public void setFlagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
  }


  public HybridTransaction flagName(@jakarta.annotation.Nullable String flagName) {
    this.flagName = JsonNullable.<String>of(flagName);
    return this;
  }

  /**
   * The customized name of a transaction flag
   * @return flagName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getFlagName() {
        return flagName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLAG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFlagName_JsonNullable() {
    return flagName;
  }
  
  @JsonProperty(JSON_PROPERTY_FLAG_NAME)
  public void setFlagName_JsonNullable(JsonNullable<String> flagName) {
    this.flagName = flagName;
  }

  public void setFlagName(@jakarta.annotation.Nullable String flagName) {
    this.flagName = JsonNullable.<String>of(flagName);
  }


  public HybridTransaction accountId(@jakarta.annotation.Nonnull UUID accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(@jakarta.annotation.Nonnull UUID accountId) {
    this.accountId = accountId;
  }


  public HybridTransaction payeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
    return this;
  }

  /**
   * Get payeeId
   * @return payeeId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getPayeeId() {
        return payeeId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getPayeeId_JsonNullable() {
    return payeeId;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  public void setPayeeId_JsonNullable(JsonNullable<UUID> payeeId) {
    this.payeeId = payeeId;
  }

  public void setPayeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
  }


  public HybridTransaction categoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getCategoryId() {
        return categoryId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getCategoryId_JsonNullable() {
    return categoryId;
  }
  
  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  public void setCategoryId_JsonNullable(JsonNullable<UUID> categoryId) {
    this.categoryId = categoryId;
  }

  public void setCategoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
  }


  public HybridTransaction transferAccountId(@jakarta.annotation.Nullable UUID transferAccountId) {
    this.transferAccountId = JsonNullable.<UUID>of(transferAccountId);
    return this;
  }

  /**
   * If a transfer transaction, the account to which it transfers
   * @return transferAccountId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getTransferAccountId() {
        return transferAccountId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSFER_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getTransferAccountId_JsonNullable() {
    return transferAccountId;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSFER_ACCOUNT_ID)
  public void setTransferAccountId_JsonNullable(JsonNullable<UUID> transferAccountId) {
    this.transferAccountId = transferAccountId;
  }

  public void setTransferAccountId(@jakarta.annotation.Nullable UUID transferAccountId) {
    this.transferAccountId = JsonNullable.<UUID>of(transferAccountId);
  }


  public HybridTransaction transferTransactionId(@jakarta.annotation.Nullable String transferTransactionId) {
    this.transferTransactionId = JsonNullable.<String>of(transferTransactionId);
    return this;
  }

  /**
   * If a transfer transaction, the id of transaction on the other side of the transfer
   * @return transferTransactionId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getTransferTransactionId() {
        return transferTransactionId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSFER_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTransferTransactionId_JsonNullable() {
    return transferTransactionId;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSFER_TRANSACTION_ID)
  public void setTransferTransactionId_JsonNullable(JsonNullable<String> transferTransactionId) {
    this.transferTransactionId = transferTransactionId;
  }

  public void setTransferTransactionId(@jakarta.annotation.Nullable String transferTransactionId) {
    this.transferTransactionId = JsonNullable.<String>of(transferTransactionId);
  }


  public HybridTransaction matchedTransactionId(@jakarta.annotation.Nullable String matchedTransactionId) {
    this.matchedTransactionId = JsonNullable.<String>of(matchedTransactionId);
    return this;
  }

  /**
   * If transaction is matched, the id of the matched transaction
   * @return matchedTransactionId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getMatchedTransactionId() {
        return matchedTransactionId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MATCHED_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMatchedTransactionId_JsonNullable() {
    return matchedTransactionId;
  }
  
  @JsonProperty(JSON_PROPERTY_MATCHED_TRANSACTION_ID)
  public void setMatchedTransactionId_JsonNullable(JsonNullable<String> matchedTransactionId) {
    this.matchedTransactionId = matchedTransactionId;
  }

  public void setMatchedTransactionId(@jakarta.annotation.Nullable String matchedTransactionId) {
    this.matchedTransactionId = JsonNullable.<String>of(matchedTransactionId);
  }


  public HybridTransaction importId(@jakarta.annotation.Nullable String importId) {
    this.importId = JsonNullable.<String>of(importId);
    return this;
  }

  /**
   * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: &#39;YNAB:[milliunit_amount]:[iso_date]:[occurrence]&#39;.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of &#39;YNAB:-294230:2015-12-30:1&#39;.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be &#39;YNAB:-294230:2015-12-30:2&#39;.
   * @return importId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getImportId() {
        return importId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMPORT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getImportId_JsonNullable() {
    return importId;
  }
  
  @JsonProperty(JSON_PROPERTY_IMPORT_ID)
  public void setImportId_JsonNullable(JsonNullable<String> importId) {
    this.importId = importId;
  }

  public void setImportId(@jakarta.annotation.Nullable String importId) {
    this.importId = JsonNullable.<String>of(importId);
  }


  public HybridTransaction importPayeeName(@jakarta.annotation.Nullable String importPayeeName) {
    this.importPayeeName = JsonNullable.<String>of(importPayeeName);
    return this;
  }

  /**
   * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
   * @return importPayeeName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getImportPayeeName() {
        return importPayeeName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMPORT_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getImportPayeeName_JsonNullable() {
    return importPayeeName;
  }
  
  @JsonProperty(JSON_PROPERTY_IMPORT_PAYEE_NAME)
  public void setImportPayeeName_JsonNullable(JsonNullable<String> importPayeeName) {
    this.importPayeeName = importPayeeName;
  }

  public void setImportPayeeName(@jakarta.annotation.Nullable String importPayeeName) {
    this.importPayeeName = JsonNullable.<String>of(importPayeeName);
  }


  public HybridTransaction importPayeeNameOriginal(@jakarta.annotation.Nullable String importPayeeNameOriginal) {
    this.importPayeeNameOriginal = JsonNullable.<String>of(importPayeeNameOriginal);
    return this;
  }

  /**
   * If the transaction was imported, the original payee name as it appeared on the statement
   * @return importPayeeNameOriginal
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getImportPayeeNameOriginal() {
        return importPayeeNameOriginal.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMPORT_PAYEE_NAME_ORIGINAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getImportPayeeNameOriginal_JsonNullable() {
    return importPayeeNameOriginal;
  }
  
  @JsonProperty(JSON_PROPERTY_IMPORT_PAYEE_NAME_ORIGINAL)
  public void setImportPayeeNameOriginal_JsonNullable(JsonNullable<String> importPayeeNameOriginal) {
    this.importPayeeNameOriginal = importPayeeNameOriginal;
  }

  public void setImportPayeeNameOriginal(@jakarta.annotation.Nullable String importPayeeNameOriginal) {
    this.importPayeeNameOriginal = JsonNullable.<String>of(importPayeeNameOriginal);
  }


  public HybridTransaction debtTransactionType(@jakarta.annotation.Nullable DebtTransactionTypeEnum debtTransactionType) {
    this.debtTransactionType = JsonNullable.<DebtTransactionTypeEnum>of(debtTransactionType);
    return this;
  }

  /**
   * If the transaction is a debt/loan account transaction, the type of transaction
   * @return debtTransactionType
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public DebtTransactionTypeEnum getDebtTransactionType() {
        return debtTransactionType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEBT_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DebtTransactionTypeEnum> getDebtTransactionType_JsonNullable() {
    return debtTransactionType;
  }
  
  @JsonProperty(JSON_PROPERTY_DEBT_TRANSACTION_TYPE)
  public void setDebtTransactionType_JsonNullable(JsonNullable<DebtTransactionTypeEnum> debtTransactionType) {
    this.debtTransactionType = debtTransactionType;
  }

  public void setDebtTransactionType(@jakarta.annotation.Nullable DebtTransactionTypeEnum debtTransactionType) {
    this.debtTransactionType = JsonNullable.<DebtTransactionTypeEnum>of(debtTransactionType);
  }


  public HybridTransaction deleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
   * @return deleted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }


  public HybridTransaction type(@jakarta.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Whether the hybrid transaction represents a regular transaction or a subtransaction
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public HybridTransaction parentTransactionId(@jakarta.annotation.Nullable String parentTransactionId) {
    this.parentTransactionId = JsonNullable.<String>of(parentTransactionId);
    return this;
  }

  /**
   * For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
   * @return parentTransactionId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getParentTransactionId() {
        return parentTransactionId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARENT_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getParentTransactionId_JsonNullable() {
    return parentTransactionId;
  }
  
  @JsonProperty(JSON_PROPERTY_PARENT_TRANSACTION_ID)
  public void setParentTransactionId_JsonNullable(JsonNullable<String> parentTransactionId) {
    this.parentTransactionId = parentTransactionId;
  }

  public void setParentTransactionId(@jakarta.annotation.Nullable String parentTransactionId) {
    this.parentTransactionId = JsonNullable.<String>of(parentTransactionId);
  }


  public HybridTransaction accountName(@jakarta.annotation.Nonnull String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getAccountName() {
    return accountName;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountName(@jakarta.annotation.Nonnull String accountName) {
    this.accountName = accountName;
  }


  public HybridTransaction payeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
    return this;
  }

  /**
   * Get payeeName
   * @return payeeName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getPayeeName() {
        return payeeName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPayeeName_JsonNullable() {
    return payeeName;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  public void setPayeeName_JsonNullable(JsonNullable<String> payeeName) {
    this.payeeName = payeeName;
  }

  public void setPayeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
  }


  public HybridTransaction categoryName(@jakarta.annotation.Nullable String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  /**
   * The name of the category.  If a split transaction, this will be &#39;Split&#39;.
   * @return categoryName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCategoryName() {
    return categoryName;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategoryName(@jakarta.annotation.Nullable String categoryName) {
    this.categoryName = categoryName;
  }


  /**
   * Return true if this HybridTransaction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HybridTransaction hybridTransaction = (HybridTransaction) o;
    return Objects.equals(this.id, hybridTransaction.id) &&
        Objects.equals(this.date, hybridTransaction.date) &&
        Objects.equals(this.amount, hybridTransaction.amount) &&
        equalsNullable(this.memo, hybridTransaction.memo) &&
        Objects.equals(this.cleared, hybridTransaction.cleared) &&
        Objects.equals(this.approved, hybridTransaction.approved) &&
        equalsNullable(this.flagColor, hybridTransaction.flagColor) &&
        equalsNullable(this.flagName, hybridTransaction.flagName) &&
        Objects.equals(this.accountId, hybridTransaction.accountId) &&
        equalsNullable(this.payeeId, hybridTransaction.payeeId) &&
        equalsNullable(this.categoryId, hybridTransaction.categoryId) &&
        equalsNullable(this.transferAccountId, hybridTransaction.transferAccountId) &&
        equalsNullable(this.transferTransactionId, hybridTransaction.transferTransactionId) &&
        equalsNullable(this.matchedTransactionId, hybridTransaction.matchedTransactionId) &&
        equalsNullable(this.importId, hybridTransaction.importId) &&
        equalsNullable(this.importPayeeName, hybridTransaction.importPayeeName) &&
        equalsNullable(this.importPayeeNameOriginal, hybridTransaction.importPayeeNameOriginal) &&
        equalsNullable(this.debtTransactionType, hybridTransaction.debtTransactionType) &&
        Objects.equals(this.deleted, hybridTransaction.deleted) &&
        Objects.equals(this.type, hybridTransaction.type) &&
        equalsNullable(this.parentTransactionId, hybridTransaction.parentTransactionId) &&
        Objects.equals(this.accountName, hybridTransaction.accountName) &&
        equalsNullable(this.payeeName, hybridTransaction.payeeName) &&
        Objects.equals(this.categoryName, hybridTransaction.categoryName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, date, amount, hashCodeNullable(memo), cleared, approved, hashCodeNullable(flagColor), hashCodeNullable(flagName), accountId, hashCodeNullable(payeeId), hashCodeNullable(categoryId), hashCodeNullable(transferAccountId), hashCodeNullable(transferTransactionId), hashCodeNullable(matchedTransactionId), hashCodeNullable(importId), hashCodeNullable(importPayeeName), hashCodeNullable(importPayeeNameOriginal), hashCodeNullable(debtTransactionType), deleted, type, hashCodeNullable(parentTransactionId), accountName, hashCodeNullable(payeeName), categoryName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HybridTransaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    cleared: ").append(toIndentedString(cleared)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    flagColor: ").append(toIndentedString(flagColor)).append("\n");
    sb.append("    flagName: ").append(toIndentedString(flagName)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    transferAccountId: ").append(toIndentedString(transferAccountId)).append("\n");
    sb.append("    transferTransactionId: ").append(toIndentedString(transferTransactionId)).append("\n");
    sb.append("    matchedTransactionId: ").append(toIndentedString(matchedTransactionId)).append("\n");
    sb.append("    importId: ").append(toIndentedString(importId)).append("\n");
    sb.append("    importPayeeName: ").append(toIndentedString(importPayeeName)).append("\n");
    sb.append("    importPayeeNameOriginal: ").append(toIndentedString(importPayeeNameOriginal)).append("\n");
    sb.append("    debtTransactionType: ").append(toIndentedString(debtTransactionType)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    parentTransactionId: ").append(toIndentedString(parentTransactionId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      joiner.add(String.format("%sdate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDate()))));
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(String.format("%samount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAmount()))));
    }

    // add `memo` to the URL query string
    if (getMemo() != null) {
      joiner.add(String.format("%smemo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMemo()))));
    }

    // add `cleared` to the URL query string
    if (getCleared() != null) {
      joiner.add(String.format("%scleared%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCleared()))));
    }

    // add `approved` to the URL query string
    if (getApproved() != null) {
      joiner.add(String.format("%sapproved%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getApproved()))));
    }

    // add `flag_color` to the URL query string
    if (getFlagColor() != null) {
      joiner.add(String.format("%sflag_color%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFlagColor()))));
    }

    // add `flag_name` to the URL query string
    if (getFlagName() != null) {
      joiner.add(String.format("%sflag_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFlagName()))));
    }

    // add `account_id` to the URL query string
    if (getAccountId() != null) {
      joiner.add(String.format("%saccount_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAccountId()))));
    }

    // add `payee_id` to the URL query string
    if (getPayeeId() != null) {
      joiner.add(String.format("%spayee_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeId()))));
    }

    // add `category_id` to the URL query string
    if (getCategoryId() != null) {
      joiner.add(String.format("%scategory_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryId()))));
    }

    // add `transfer_account_id` to the URL query string
    if (getTransferAccountId() != null) {
      joiner.add(String.format("%stransfer_account_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTransferAccountId()))));
    }

    // add `transfer_transaction_id` to the URL query string
    if (getTransferTransactionId() != null) {
      joiner.add(String.format("%stransfer_transaction_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTransferTransactionId()))));
    }

    // add `matched_transaction_id` to the URL query string
    if (getMatchedTransactionId() != null) {
      joiner.add(String.format("%smatched_transaction_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMatchedTransactionId()))));
    }

    // add `import_id` to the URL query string
    if (getImportId() != null) {
      joiner.add(String.format("%simport_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getImportId()))));
    }

    // add `import_payee_name` to the URL query string
    if (getImportPayeeName() != null) {
      joiner.add(String.format("%simport_payee_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getImportPayeeName()))));
    }

    // add `import_payee_name_original` to the URL query string
    if (getImportPayeeNameOriginal() != null) {
      joiner.add(String.format("%simport_payee_name_original%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getImportPayeeNameOriginal()))));
    }

    // add `debt_transaction_type` to the URL query string
    if (getDebtTransactionType() != null) {
      joiner.add(String.format("%sdebt_transaction_type%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDebtTransactionType()))));
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeleted()))));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `parent_transaction_id` to the URL query string
    if (getParentTransactionId() != null) {
      joiner.add(String.format("%sparent_transaction_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getParentTransactionId()))));
    }

    // add `account_name` to the URL query string
    if (getAccountName() != null) {
      joiner.add(String.format("%saccount_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAccountName()))));
    }

    // add `payee_name` to the URL query string
    if (getPayeeName() != null) {
      joiner.add(String.format("%spayee_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeName()))));
    }

    // add `category_name` to the URL query string
    if (getCategoryName() != null) {
      joiner.add(String.format("%scategory_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryName()))));
    }

    return joiner.toString();
  }
}

