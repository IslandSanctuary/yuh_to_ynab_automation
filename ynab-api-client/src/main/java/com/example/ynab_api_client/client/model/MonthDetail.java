/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.example.ynab_api_client.client.model.Category;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * MonthDetail
 */
@JsonPropertyOrder({
  MonthDetail.JSON_PROPERTY_MONTH,
  MonthDetail.JSON_PROPERTY_NOTE,
  MonthDetail.JSON_PROPERTY_INCOME,
  MonthDetail.JSON_PROPERTY_BUDGETED,
  MonthDetail.JSON_PROPERTY_ACTIVITY,
  MonthDetail.JSON_PROPERTY_TO_BE_BUDGETED,
  MonthDetail.JSON_PROPERTY_AGE_OF_MONEY,
  MonthDetail.JSON_PROPERTY_DELETED,
  MonthDetail.JSON_PROPERTY_CATEGORIES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class MonthDetail {
  public static final String JSON_PROPERTY_MONTH = "month";
  @jakarta.annotation.Nonnull
  private LocalDate month;

  public static final String JSON_PROPERTY_NOTE = "note";
  private JsonNullable<String> note = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INCOME = "income";
  @jakarta.annotation.Nonnull
  private Long income;

  public static final String JSON_PROPERTY_BUDGETED = "budgeted";
  @jakarta.annotation.Nonnull
  private Long budgeted;

  public static final String JSON_PROPERTY_ACTIVITY = "activity";
  @jakarta.annotation.Nonnull
  private Long activity;

  public static final String JSON_PROPERTY_TO_BE_BUDGETED = "to_be_budgeted";
  @jakarta.annotation.Nonnull
  private Long toBeBudgeted;

  public static final String JSON_PROPERTY_AGE_OF_MONEY = "age_of_money";
  private JsonNullable<Integer> ageOfMoney = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @jakarta.annotation.Nonnull
  private Boolean deleted;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  @jakarta.annotation.Nonnull
  private List<Category> categories = new ArrayList<>();

  public MonthDetail() { 
  }

  public MonthDetail month(@jakarta.annotation.Nonnull LocalDate month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LocalDate getMonth() {
    return month;
  }


  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMonth(@jakarta.annotation.Nonnull LocalDate month) {
    this.month = month;
  }


  public MonthDetail note(@jakarta.annotation.Nullable String note) {
    this.note = JsonNullable.<String>of(note);
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getNote() {
        return note.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getNote_JsonNullable() {
    return note;
  }
  
  @JsonProperty(JSON_PROPERTY_NOTE)
  public void setNote_JsonNullable(JsonNullable<String> note) {
    this.note = note;
  }

  public void setNote(@jakarta.annotation.Nullable String note) {
    this.note = JsonNullable.<String>of(note);
  }


  public MonthDetail income(@jakarta.annotation.Nonnull Long income) {
    this.income = income;
    return this;
  }

  /**
   * The total amount of transactions categorized to &#39;Inflow: Ready to Assign&#39; in the month
   * @return income
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INCOME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getIncome() {
    return income;
  }


  @JsonProperty(JSON_PROPERTY_INCOME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIncome(@jakarta.annotation.Nonnull Long income) {
    this.income = income;
  }


  public MonthDetail budgeted(@jakarta.annotation.Nonnull Long budgeted) {
    this.budgeted = budgeted;
    return this;
  }

  /**
   * The total amount budgeted in the month
   * @return budgeted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUDGETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getBudgeted() {
    return budgeted;
  }


  @JsonProperty(JSON_PROPERTY_BUDGETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBudgeted(@jakarta.annotation.Nonnull Long budgeted) {
    this.budgeted = budgeted;
  }


  public MonthDetail activity(@jakarta.annotation.Nonnull Long activity) {
    this.activity = activity;
    return this;
  }

  /**
   * The total amount of transactions in the month, excluding those categorized to &#39;Inflow: Ready to Assign&#39;
   * @return activity
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getActivity() {
    return activity;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActivity(@jakarta.annotation.Nonnull Long activity) {
    this.activity = activity;
  }


  public MonthDetail toBeBudgeted(@jakarta.annotation.Nonnull Long toBeBudgeted) {
    this.toBeBudgeted = toBeBudgeted;
    return this;
  }

  /**
   * The available amount for &#39;Ready to Assign&#39;
   * @return toBeBudgeted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO_BE_BUDGETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getToBeBudgeted() {
    return toBeBudgeted;
  }


  @JsonProperty(JSON_PROPERTY_TO_BE_BUDGETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToBeBudgeted(@jakarta.annotation.Nonnull Long toBeBudgeted) {
    this.toBeBudgeted = toBeBudgeted;
  }


  public MonthDetail ageOfMoney(@jakarta.annotation.Nullable Integer ageOfMoney) {
    this.ageOfMoney = JsonNullable.<Integer>of(ageOfMoney);
    return this;
  }

  /**
   * The Age of Money as of the month
   * @return ageOfMoney
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Integer getAgeOfMoney() {
        return ageOfMoney.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AGE_OF_MONEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAgeOfMoney_JsonNullable() {
    return ageOfMoney;
  }
  
  @JsonProperty(JSON_PROPERTY_AGE_OF_MONEY)
  public void setAgeOfMoney_JsonNullable(JsonNullable<Integer> ageOfMoney) {
    this.ageOfMoney = ageOfMoney;
  }

  public void setAgeOfMoney(@jakarta.annotation.Nullable Integer ageOfMoney) {
    this.ageOfMoney = JsonNullable.<Integer>of(ageOfMoney);
  }


  public MonthDetail deleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
   * @return deleted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }


  public MonthDetail categories(@jakarta.annotation.Nonnull List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public MonthDetail addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
   * @return categories
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<Category> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCategories(@jakarta.annotation.Nonnull List<Category> categories) {
    this.categories = categories;
  }


  /**
   * Return true if this MonthDetail object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonthDetail monthDetail = (MonthDetail) o;
    return Objects.equals(this.month, monthDetail.month) &&
        equalsNullable(this.note, monthDetail.note) &&
        Objects.equals(this.income, monthDetail.income) &&
        Objects.equals(this.budgeted, monthDetail.budgeted) &&
        Objects.equals(this.activity, monthDetail.activity) &&
        Objects.equals(this.toBeBudgeted, monthDetail.toBeBudgeted) &&
        equalsNullable(this.ageOfMoney, monthDetail.ageOfMoney) &&
        Objects.equals(this.deleted, monthDetail.deleted) &&
        Objects.equals(this.categories, monthDetail.categories);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(month, hashCodeNullable(note), income, budgeted, activity, toBeBudgeted, hashCodeNullable(ageOfMoney), deleted, categories);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonthDetail {\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    budgeted: ").append(toIndentedString(budgeted)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    toBeBudgeted: ").append(toIndentedString(toBeBudgeted)).append("\n");
    sb.append("    ageOfMoney: ").append(toIndentedString(ageOfMoney)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `month` to the URL query string
    if (getMonth() != null) {
      joiner.add(String.format("%smonth%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMonth()))));
    }

    // add `note` to the URL query string
    if (getNote() != null) {
      joiner.add(String.format("%snote%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNote()))));
    }

    // add `income` to the URL query string
    if (getIncome() != null) {
      joiner.add(String.format("%sincome%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIncome()))));
    }

    // add `budgeted` to the URL query string
    if (getBudgeted() != null) {
      joiner.add(String.format("%sbudgeted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBudgeted()))));
    }

    // add `activity` to the URL query string
    if (getActivity() != null) {
      joiner.add(String.format("%sactivity%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getActivity()))));
    }

    // add `to_be_budgeted` to the URL query string
    if (getToBeBudgeted() != null) {
      joiner.add(String.format("%sto_be_budgeted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getToBeBudgeted()))));
    }

    // add `age_of_money` to the URL query string
    if (getAgeOfMoney() != null) {
      joiner.add(String.format("%sage_of_money%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAgeOfMoney()))));
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeleted()))));
    }

    // add `categories` to the URL query string
    if (getCategories() != null) {
      for (int i = 0; i < getCategories().size(); i++) {
        if (getCategories().get(i) != null) {
          joiner.add(getCategories().get(i).toUrlQueryString(String.format("%scategories%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

