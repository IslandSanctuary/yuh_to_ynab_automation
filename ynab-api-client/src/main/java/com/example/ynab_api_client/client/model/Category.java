/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * Category
 */
@JsonPropertyOrder({
  Category.JSON_PROPERTY_ID,
  Category.JSON_PROPERTY_CATEGORY_GROUP_ID,
  Category.JSON_PROPERTY_CATEGORY_GROUP_NAME,
  Category.JSON_PROPERTY_NAME,
  Category.JSON_PROPERTY_HIDDEN,
  Category.JSON_PROPERTY_ORIGINAL_CATEGORY_GROUP_ID,
  Category.JSON_PROPERTY_NOTE,
  Category.JSON_PROPERTY_BUDGETED,
  Category.JSON_PROPERTY_ACTIVITY,
  Category.JSON_PROPERTY_BALANCE,
  Category.JSON_PROPERTY_GOAL_TYPE,
  Category.JSON_PROPERTY_GOAL_NEEDS_WHOLE_AMOUNT,
  Category.JSON_PROPERTY_GOAL_DAY,
  Category.JSON_PROPERTY_GOAL_CADENCE,
  Category.JSON_PROPERTY_GOAL_CADENCE_FREQUENCY,
  Category.JSON_PROPERTY_GOAL_CREATION_MONTH,
  Category.JSON_PROPERTY_GOAL_TARGET,
  Category.JSON_PROPERTY_GOAL_TARGET_MONTH,
  Category.JSON_PROPERTY_GOAL_PERCENTAGE_COMPLETE,
  Category.JSON_PROPERTY_GOAL_MONTHS_TO_BUDGET,
  Category.JSON_PROPERTY_GOAL_UNDER_FUNDED,
  Category.JSON_PROPERTY_GOAL_OVERALL_FUNDED,
  Category.JSON_PROPERTY_GOAL_OVERALL_LEFT,
  Category.JSON_PROPERTY_DELETED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class Category {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_CATEGORY_GROUP_ID = "category_group_id";
  @jakarta.annotation.Nonnull
  private UUID categoryGroupId;

  public static final String JSON_PROPERTY_CATEGORY_GROUP_NAME = "category_group_name";
  @jakarta.annotation.Nullable
  private String categoryGroupName;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_HIDDEN = "hidden";
  @jakarta.annotation.Nonnull
  private Boolean hidden;

  public static final String JSON_PROPERTY_ORIGINAL_CATEGORY_GROUP_ID = "original_category_group_id";
  private JsonNullable<UUID> originalCategoryGroupId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_NOTE = "note";
  private JsonNullable<String> note = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BUDGETED = "budgeted";
  @jakarta.annotation.Nonnull
  private Long budgeted;

  public static final String JSON_PROPERTY_ACTIVITY = "activity";
  @jakarta.annotation.Nonnull
  private Long activity;

  public static final String JSON_PROPERTY_BALANCE = "balance";
  @jakarta.annotation.Nonnull
  private Long balance;

  /**
   * The type of goal, if the category has a goal (TB&#x3D;&#39;Target Category Balance&#39;, TBD&#x3D;&#39;Target Category Balance by Date&#39;, MF&#x3D;&#39;Monthly Funding&#39;, NEED&#x3D;&#39;Plan Your Spending&#39;)
   */
  public enum GoalTypeEnum {
    TB(String.valueOf("TB")),
    
    TBD(String.valueOf("TBD")),
    
    MF(String.valueOf("MF")),
    
    NEED(String.valueOf("NEED")),
    
    DEBT(String.valueOf("DEBT"));

    private String value;

    GoalTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GoalTypeEnum fromValue(String value) {
      for (GoalTypeEnum b : GoalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_GOAL_TYPE = "goal_type";
  private JsonNullable<GoalTypeEnum> goalType = JsonNullable.<GoalTypeEnum>undefined();

  public static final String JSON_PROPERTY_GOAL_NEEDS_WHOLE_AMOUNT = "goal_needs_whole_amount";
  private JsonNullable<Boolean> goalNeedsWholeAmount = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_GOAL_DAY = "goal_day";
  private JsonNullable<Integer> goalDay = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_GOAL_CADENCE = "goal_cadence";
  private JsonNullable<Integer> goalCadence = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_GOAL_CADENCE_FREQUENCY = "goal_cadence_frequency";
  private JsonNullable<Integer> goalCadenceFrequency = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_GOAL_CREATION_MONTH = "goal_creation_month";
  private JsonNullable<LocalDate> goalCreationMonth = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_GOAL_TARGET = "goal_target";
  private JsonNullable<Long> goalTarget = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_GOAL_TARGET_MONTH = "goal_target_month";
  private JsonNullable<LocalDate> goalTargetMonth = JsonNullable.<LocalDate>undefined();

  public static final String JSON_PROPERTY_GOAL_PERCENTAGE_COMPLETE = "goal_percentage_complete";
  private JsonNullable<Integer> goalPercentageComplete = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_GOAL_MONTHS_TO_BUDGET = "goal_months_to_budget";
  private JsonNullable<Integer> goalMonthsToBudget = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_GOAL_UNDER_FUNDED = "goal_under_funded";
  private JsonNullable<Long> goalUnderFunded = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_GOAL_OVERALL_FUNDED = "goal_overall_funded";
  private JsonNullable<Long> goalOverallFunded = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_GOAL_OVERALL_LEFT = "goal_overall_left";
  private JsonNullable<Long> goalOverallLeft = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @jakarta.annotation.Nonnull
  private Boolean deleted;

  public Category() { 
  }

  public Category id(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public Category categoryGroupId(@jakarta.annotation.Nonnull UUID categoryGroupId) {
    this.categoryGroupId = categoryGroupId;
    return this;
  }

  /**
   * Get categoryGroupId
   * @return categoryGroupId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CATEGORY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getCategoryGroupId() {
    return categoryGroupId;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCategoryGroupId(@jakarta.annotation.Nonnull UUID categoryGroupId) {
    this.categoryGroupId = categoryGroupId;
  }


  public Category categoryGroupName(@jakarta.annotation.Nullable String categoryGroupName) {
    this.categoryGroupName = categoryGroupName;
    return this;
  }

  /**
   * Get categoryGroupName
   * @return categoryGroupName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCategoryGroupName() {
    return categoryGroupName;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategoryGroupName(@jakarta.annotation.Nullable String categoryGroupName) {
    this.categoryGroupName = categoryGroupName;
  }


  public Category name(@jakarta.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }


  public Category hidden(@jakarta.annotation.Nonnull Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Whether or not the category is hidden
   * @return hidden
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getHidden() {
    return hidden;
  }


  @JsonProperty(JSON_PROPERTY_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHidden(@jakarta.annotation.Nonnull Boolean hidden) {
    this.hidden = hidden;
  }


  public Category originalCategoryGroupId(@jakarta.annotation.Nullable UUID originalCategoryGroupId) {
    this.originalCategoryGroupId = JsonNullable.<UUID>of(originalCategoryGroupId);
    return this;
  }

  /**
   * DEPRECATED: No longer used.  Value will always be null.
   * @return originalCategoryGroupId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getOriginalCategoryGroupId() {
        return originalCategoryGroupId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORIGINAL_CATEGORY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getOriginalCategoryGroupId_JsonNullable() {
    return originalCategoryGroupId;
  }
  
  @JsonProperty(JSON_PROPERTY_ORIGINAL_CATEGORY_GROUP_ID)
  public void setOriginalCategoryGroupId_JsonNullable(JsonNullable<UUID> originalCategoryGroupId) {
    this.originalCategoryGroupId = originalCategoryGroupId;
  }

  public void setOriginalCategoryGroupId(@jakarta.annotation.Nullable UUID originalCategoryGroupId) {
    this.originalCategoryGroupId = JsonNullable.<UUID>of(originalCategoryGroupId);
  }


  public Category note(@jakarta.annotation.Nullable String note) {
    this.note = JsonNullable.<String>of(note);
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getNote() {
        return note.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getNote_JsonNullable() {
    return note;
  }
  
  @JsonProperty(JSON_PROPERTY_NOTE)
  public void setNote_JsonNullable(JsonNullable<String> note) {
    this.note = note;
  }

  public void setNote(@jakarta.annotation.Nullable String note) {
    this.note = JsonNullable.<String>of(note);
  }


  public Category budgeted(@jakarta.annotation.Nonnull Long budgeted) {
    this.budgeted = budgeted;
    return this;
  }

  /**
   * Budgeted amount in milliunits format
   * @return budgeted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUDGETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getBudgeted() {
    return budgeted;
  }


  @JsonProperty(JSON_PROPERTY_BUDGETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBudgeted(@jakarta.annotation.Nonnull Long budgeted) {
    this.budgeted = budgeted;
  }


  public Category activity(@jakarta.annotation.Nonnull Long activity) {
    this.activity = activity;
    return this;
  }

  /**
   * Activity amount in milliunits format
   * @return activity
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getActivity() {
    return activity;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActivity(@jakarta.annotation.Nonnull Long activity) {
    this.activity = activity;
  }


  public Category balance(@jakarta.annotation.Nonnull Long balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Balance in milliunits format
   * @return balance
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getBalance() {
    return balance;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBalance(@jakarta.annotation.Nonnull Long balance) {
    this.balance = balance;
  }


  public Category goalType(@jakarta.annotation.Nullable GoalTypeEnum goalType) {
    this.goalType = JsonNullable.<GoalTypeEnum>of(goalType);
    return this;
  }

  /**
   * The type of goal, if the category has a goal (TB&#x3D;&#39;Target Category Balance&#39;, TBD&#x3D;&#39;Target Category Balance by Date&#39;, MF&#x3D;&#39;Monthly Funding&#39;, NEED&#x3D;&#39;Plan Your Spending&#39;)
   * @return goalType
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public GoalTypeEnum getGoalType() {
        return goalType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<GoalTypeEnum> getGoalType_JsonNullable() {
    return goalType;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_TYPE)
  public void setGoalType_JsonNullable(JsonNullable<GoalTypeEnum> goalType) {
    this.goalType = goalType;
  }

  public void setGoalType(@jakarta.annotation.Nullable GoalTypeEnum goalType) {
    this.goalType = JsonNullable.<GoalTypeEnum>of(goalType);
  }


  public Category goalNeedsWholeAmount(@jakarta.annotation.Nullable Boolean goalNeedsWholeAmount) {
    this.goalNeedsWholeAmount = JsonNullable.<Boolean>of(goalNeedsWholeAmount);
    return this;
  }

  /**
   * Indicates the monthly rollover behavior for \&quot;NEED\&quot;-type goals. When \&quot;true\&quot;, the goal will always ask for the target amount in the new month (\&quot;Set Aside\&quot;). When \&quot;false\&quot;, previous month category funding is used (\&quot;Refill\&quot;). For other goal types, this field will be null.
   * @return goalNeedsWholeAmount
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Boolean getGoalNeedsWholeAmount() {
        return goalNeedsWholeAmount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_NEEDS_WHOLE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getGoalNeedsWholeAmount_JsonNullable() {
    return goalNeedsWholeAmount;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_NEEDS_WHOLE_AMOUNT)
  public void setGoalNeedsWholeAmount_JsonNullable(JsonNullable<Boolean> goalNeedsWholeAmount) {
    this.goalNeedsWholeAmount = goalNeedsWholeAmount;
  }

  public void setGoalNeedsWholeAmount(@jakarta.annotation.Nullable Boolean goalNeedsWholeAmount) {
    this.goalNeedsWholeAmount = JsonNullable.<Boolean>of(goalNeedsWholeAmount);
  }


  public Category goalDay(@jakarta.annotation.Nullable Integer goalDay) {
    this.goalDay = JsonNullable.<Integer>of(goalDay);
    return this;
  }

  /**
   * A day offset modifier for the goal&#39;s due date. When goal_cadence is 2 (Weekly), this value specifies which day of the week the goal is due (0 &#x3D; Sunday, 6 &#x3D; Saturday). Otherwise, this value specifies which day of the month the goal is due (1 &#x3D; 1st, 31 &#x3D; 31st, null &#x3D; Last day of Month).
   * @return goalDay
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Integer getGoalDay() {
        return goalDay.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getGoalDay_JsonNullable() {
    return goalDay;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_DAY)
  public void setGoalDay_JsonNullable(JsonNullable<Integer> goalDay) {
    this.goalDay = goalDay;
  }

  public void setGoalDay(@jakarta.annotation.Nullable Integer goalDay) {
    this.goalDay = JsonNullable.<Integer>of(goalDay);
  }


  public Category goalCadence(@jakarta.annotation.Nullable Integer goalCadence) {
    this.goalCadence = JsonNullable.<Integer>of(goalCadence);
    return this;
  }

  /**
   * The goal cadence. Value in range 0-14. There are two subsets of these values which behave differently. For values 0, 1, 2, and 13, the goal&#39;s due date repeats every goal_cadence * goal_cadence_frequency, where 0 &#x3D; None, 1 &#x3D; Monthly, 2 &#x3D; Weekly, and 13 &#x3D; Yearly. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month. For values 3-12 and 14, goal_cadence_frequency is ignored and the goal&#39;s due date repeats every goal_cadence, where 3 &#x3D; Every 2 Months, 4 &#x3D; Every 3 Months, ..., 12 &#x3D; Every 11 Months, and 14 &#x3D; Every 2 Years.
   * @return goalCadence
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Integer getGoalCadence() {
        return goalCadence.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_CADENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getGoalCadence_JsonNullable() {
    return goalCadence;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_CADENCE)
  public void setGoalCadence_JsonNullable(JsonNullable<Integer> goalCadence) {
    this.goalCadence = goalCadence;
  }

  public void setGoalCadence(@jakarta.annotation.Nullable Integer goalCadence) {
    this.goalCadence = JsonNullable.<Integer>of(goalCadence);
  }


  public Category goalCadenceFrequency(@jakarta.annotation.Nullable Integer goalCadenceFrequency) {
    this.goalCadenceFrequency = JsonNullable.<Integer>of(goalCadenceFrequency);
    return this;
  }

  /**
   * The goal cadence frequency. When goal_cadence is 0, 1, 2, or 13, a goal&#39;s due date repeats every goal_cadence * goal_cadence_frequency. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month.  When goal_cadence is 3-12 or 14, goal_cadence_frequency is ignored.
   * @return goalCadenceFrequency
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Integer getGoalCadenceFrequency() {
        return goalCadenceFrequency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_CADENCE_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getGoalCadenceFrequency_JsonNullable() {
    return goalCadenceFrequency;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_CADENCE_FREQUENCY)
  public void setGoalCadenceFrequency_JsonNullable(JsonNullable<Integer> goalCadenceFrequency) {
    this.goalCadenceFrequency = goalCadenceFrequency;
  }

  public void setGoalCadenceFrequency(@jakarta.annotation.Nullable Integer goalCadenceFrequency) {
    this.goalCadenceFrequency = JsonNullable.<Integer>of(goalCadenceFrequency);
  }


  public Category goalCreationMonth(@jakarta.annotation.Nullable LocalDate goalCreationMonth) {
    this.goalCreationMonth = JsonNullable.<LocalDate>of(goalCreationMonth);
    return this;
  }

  /**
   * The month a goal was created
   * @return goalCreationMonth
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public LocalDate getGoalCreationMonth() {
        return goalCreationMonth.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_CREATION_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getGoalCreationMonth_JsonNullable() {
    return goalCreationMonth;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_CREATION_MONTH)
  public void setGoalCreationMonth_JsonNullable(JsonNullable<LocalDate> goalCreationMonth) {
    this.goalCreationMonth = goalCreationMonth;
  }

  public void setGoalCreationMonth(@jakarta.annotation.Nullable LocalDate goalCreationMonth) {
    this.goalCreationMonth = JsonNullable.<LocalDate>of(goalCreationMonth);
  }


  public Category goalTarget(@jakarta.annotation.Nullable Long goalTarget) {
    this.goalTarget = JsonNullable.<Long>of(goalTarget);
    return this;
  }

  /**
   * The goal target amount in milliunits
   * @return goalTarget
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Long getGoalTarget() {
        return goalTarget.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getGoalTarget_JsonNullable() {
    return goalTarget;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_TARGET)
  public void setGoalTarget_JsonNullable(JsonNullable<Long> goalTarget) {
    this.goalTarget = goalTarget;
  }

  public void setGoalTarget(@jakarta.annotation.Nullable Long goalTarget) {
    this.goalTarget = JsonNullable.<Long>of(goalTarget);
  }


  public Category goalTargetMonth(@jakarta.annotation.Nullable LocalDate goalTargetMonth) {
    this.goalTargetMonth = JsonNullable.<LocalDate>of(goalTargetMonth);
    return this;
  }

  /**
   * The original target month for the goal to be completed.  Only some goal types specify this date.
   * @return goalTargetMonth
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public LocalDate getGoalTargetMonth() {
        return goalTargetMonth.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_TARGET_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getGoalTargetMonth_JsonNullable() {
    return goalTargetMonth;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_TARGET_MONTH)
  public void setGoalTargetMonth_JsonNullable(JsonNullable<LocalDate> goalTargetMonth) {
    this.goalTargetMonth = goalTargetMonth;
  }

  public void setGoalTargetMonth(@jakarta.annotation.Nullable LocalDate goalTargetMonth) {
    this.goalTargetMonth = JsonNullable.<LocalDate>of(goalTargetMonth);
  }


  public Category goalPercentageComplete(@jakarta.annotation.Nullable Integer goalPercentageComplete) {
    this.goalPercentageComplete = JsonNullable.<Integer>of(goalPercentageComplete);
    return this;
  }

  /**
   * The percentage completion of the goal
   * @return goalPercentageComplete
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Integer getGoalPercentageComplete() {
        return goalPercentageComplete.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_PERCENTAGE_COMPLETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getGoalPercentageComplete_JsonNullable() {
    return goalPercentageComplete;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_PERCENTAGE_COMPLETE)
  public void setGoalPercentageComplete_JsonNullable(JsonNullable<Integer> goalPercentageComplete) {
    this.goalPercentageComplete = goalPercentageComplete;
  }

  public void setGoalPercentageComplete(@jakarta.annotation.Nullable Integer goalPercentageComplete) {
    this.goalPercentageComplete = JsonNullable.<Integer>of(goalPercentageComplete);
  }


  public Category goalMonthsToBudget(@jakarta.annotation.Nullable Integer goalMonthsToBudget) {
    this.goalMonthsToBudget = JsonNullable.<Integer>of(goalMonthsToBudget);
    return this;
  }

  /**
   * The number of months, including the current month, left in the current goal period.
   * @return goalMonthsToBudget
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Integer getGoalMonthsToBudget() {
        return goalMonthsToBudget.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_MONTHS_TO_BUDGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getGoalMonthsToBudget_JsonNullable() {
    return goalMonthsToBudget;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_MONTHS_TO_BUDGET)
  public void setGoalMonthsToBudget_JsonNullable(JsonNullable<Integer> goalMonthsToBudget) {
    this.goalMonthsToBudget = goalMonthsToBudget;
  }

  public void setGoalMonthsToBudget(@jakarta.annotation.Nullable Integer goalMonthsToBudget) {
    this.goalMonthsToBudget = JsonNullable.<Integer>of(goalMonthsToBudget);
  }


  public Category goalUnderFunded(@jakarta.annotation.Nullable Long goalUnderFunded) {
    this.goalUnderFunded = JsonNullable.<Long>of(goalUnderFunded);
    return this;
  }

  /**
   * The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period. This amount will generally correspond to the &#39;Underfunded&#39; amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
   * @return goalUnderFunded
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Long getGoalUnderFunded() {
        return goalUnderFunded.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_UNDER_FUNDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getGoalUnderFunded_JsonNullable() {
    return goalUnderFunded;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_UNDER_FUNDED)
  public void setGoalUnderFunded_JsonNullable(JsonNullable<Long> goalUnderFunded) {
    this.goalUnderFunded = goalUnderFunded;
  }

  public void setGoalUnderFunded(@jakarta.annotation.Nullable Long goalUnderFunded) {
    this.goalUnderFunded = JsonNullable.<Long>of(goalUnderFunded);
  }


  public Category goalOverallFunded(@jakarta.annotation.Nullable Long goalOverallFunded) {
    this.goalOverallFunded = JsonNullable.<Long>of(goalOverallFunded);
    return this;
  }

  /**
   * The total amount funded towards the goal within the current goal period.
   * @return goalOverallFunded
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Long getGoalOverallFunded() {
        return goalOverallFunded.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_OVERALL_FUNDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getGoalOverallFunded_JsonNullable() {
    return goalOverallFunded;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_OVERALL_FUNDED)
  public void setGoalOverallFunded_JsonNullable(JsonNullable<Long> goalOverallFunded) {
    this.goalOverallFunded = goalOverallFunded;
  }

  public void setGoalOverallFunded(@jakarta.annotation.Nullable Long goalOverallFunded) {
    this.goalOverallFunded = JsonNullable.<Long>of(goalOverallFunded);
  }


  public Category goalOverallLeft(@jakarta.annotation.Nullable Long goalOverallLeft) {
    this.goalOverallLeft = JsonNullable.<Long>of(goalOverallLeft);
    return this;
  }

  /**
   * The amount of funding still needed to complete the goal within the current goal period.
   * @return goalOverallLeft
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Long getGoalOverallLeft() {
        return goalOverallLeft.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GOAL_OVERALL_LEFT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getGoalOverallLeft_JsonNullable() {
    return goalOverallLeft;
  }
  
  @JsonProperty(JSON_PROPERTY_GOAL_OVERALL_LEFT)
  public void setGoalOverallLeft_JsonNullable(JsonNullable<Long> goalOverallLeft) {
    this.goalOverallLeft = goalOverallLeft;
  }

  public void setGoalOverallLeft(@jakarta.annotation.Nullable Long goalOverallLeft) {
    this.goalOverallLeft = JsonNullable.<Long>of(goalOverallLeft);
  }


  public Category deleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
   * @return deleted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }


  /**
   * Return true if this Category object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.id, category.id) &&
        Objects.equals(this.categoryGroupId, category.categoryGroupId) &&
        Objects.equals(this.categoryGroupName, category.categoryGroupName) &&
        Objects.equals(this.name, category.name) &&
        Objects.equals(this.hidden, category.hidden) &&
        equalsNullable(this.originalCategoryGroupId, category.originalCategoryGroupId) &&
        equalsNullable(this.note, category.note) &&
        Objects.equals(this.budgeted, category.budgeted) &&
        Objects.equals(this.activity, category.activity) &&
        Objects.equals(this.balance, category.balance) &&
        equalsNullable(this.goalType, category.goalType) &&
        equalsNullable(this.goalNeedsWholeAmount, category.goalNeedsWholeAmount) &&
        equalsNullable(this.goalDay, category.goalDay) &&
        equalsNullable(this.goalCadence, category.goalCadence) &&
        equalsNullable(this.goalCadenceFrequency, category.goalCadenceFrequency) &&
        equalsNullable(this.goalCreationMonth, category.goalCreationMonth) &&
        equalsNullable(this.goalTarget, category.goalTarget) &&
        equalsNullable(this.goalTargetMonth, category.goalTargetMonth) &&
        equalsNullable(this.goalPercentageComplete, category.goalPercentageComplete) &&
        equalsNullable(this.goalMonthsToBudget, category.goalMonthsToBudget) &&
        equalsNullable(this.goalUnderFunded, category.goalUnderFunded) &&
        equalsNullable(this.goalOverallFunded, category.goalOverallFunded) &&
        equalsNullable(this.goalOverallLeft, category.goalOverallLeft) &&
        Objects.equals(this.deleted, category.deleted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, categoryGroupId, categoryGroupName, name, hidden, hashCodeNullable(originalCategoryGroupId), hashCodeNullable(note), budgeted, activity, balance, hashCodeNullable(goalType), hashCodeNullable(goalNeedsWholeAmount), hashCodeNullable(goalDay), hashCodeNullable(goalCadence), hashCodeNullable(goalCadenceFrequency), hashCodeNullable(goalCreationMonth), hashCodeNullable(goalTarget), hashCodeNullable(goalTargetMonth), hashCodeNullable(goalPercentageComplete), hashCodeNullable(goalMonthsToBudget), hashCodeNullable(goalUnderFunded), hashCodeNullable(goalOverallFunded), hashCodeNullable(goalOverallLeft), deleted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    categoryGroupId: ").append(toIndentedString(categoryGroupId)).append("\n");
    sb.append("    categoryGroupName: ").append(toIndentedString(categoryGroupName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    originalCategoryGroupId: ").append(toIndentedString(originalCategoryGroupId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    budgeted: ").append(toIndentedString(budgeted)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    goalType: ").append(toIndentedString(goalType)).append("\n");
    sb.append("    goalNeedsWholeAmount: ").append(toIndentedString(goalNeedsWholeAmount)).append("\n");
    sb.append("    goalDay: ").append(toIndentedString(goalDay)).append("\n");
    sb.append("    goalCadence: ").append(toIndentedString(goalCadence)).append("\n");
    sb.append("    goalCadenceFrequency: ").append(toIndentedString(goalCadenceFrequency)).append("\n");
    sb.append("    goalCreationMonth: ").append(toIndentedString(goalCreationMonth)).append("\n");
    sb.append("    goalTarget: ").append(toIndentedString(goalTarget)).append("\n");
    sb.append("    goalTargetMonth: ").append(toIndentedString(goalTargetMonth)).append("\n");
    sb.append("    goalPercentageComplete: ").append(toIndentedString(goalPercentageComplete)).append("\n");
    sb.append("    goalMonthsToBudget: ").append(toIndentedString(goalMonthsToBudget)).append("\n");
    sb.append("    goalUnderFunded: ").append(toIndentedString(goalUnderFunded)).append("\n");
    sb.append("    goalOverallFunded: ").append(toIndentedString(goalOverallFunded)).append("\n");
    sb.append("    goalOverallLeft: ").append(toIndentedString(goalOverallLeft)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `category_group_id` to the URL query string
    if (getCategoryGroupId() != null) {
      joiner.add(String.format("%scategory_group_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryGroupId()))));
    }

    // add `category_group_name` to the URL query string
    if (getCategoryGroupName() != null) {
      joiner.add(String.format("%scategory_group_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryGroupName()))));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `hidden` to the URL query string
    if (getHidden() != null) {
      joiner.add(String.format("%shidden%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHidden()))));
    }

    // add `original_category_group_id` to the URL query string
    if (getOriginalCategoryGroupId() != null) {
      joiner.add(String.format("%soriginal_category_group_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOriginalCategoryGroupId()))));
    }

    // add `note` to the URL query string
    if (getNote() != null) {
      joiner.add(String.format("%snote%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNote()))));
    }

    // add `budgeted` to the URL query string
    if (getBudgeted() != null) {
      joiner.add(String.format("%sbudgeted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBudgeted()))));
    }

    // add `activity` to the URL query string
    if (getActivity() != null) {
      joiner.add(String.format("%sactivity%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getActivity()))));
    }

    // add `balance` to the URL query string
    if (getBalance() != null) {
      joiner.add(String.format("%sbalance%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBalance()))));
    }

    // add `goal_type` to the URL query string
    if (getGoalType() != null) {
      joiner.add(String.format("%sgoal_type%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalType()))));
    }

    // add `goal_needs_whole_amount` to the URL query string
    if (getGoalNeedsWholeAmount() != null) {
      joiner.add(String.format("%sgoal_needs_whole_amount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalNeedsWholeAmount()))));
    }

    // add `goal_day` to the URL query string
    if (getGoalDay() != null) {
      joiner.add(String.format("%sgoal_day%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalDay()))));
    }

    // add `goal_cadence` to the URL query string
    if (getGoalCadence() != null) {
      joiner.add(String.format("%sgoal_cadence%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalCadence()))));
    }

    // add `goal_cadence_frequency` to the URL query string
    if (getGoalCadenceFrequency() != null) {
      joiner.add(String.format("%sgoal_cadence_frequency%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalCadenceFrequency()))));
    }

    // add `goal_creation_month` to the URL query string
    if (getGoalCreationMonth() != null) {
      joiner.add(String.format("%sgoal_creation_month%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalCreationMonth()))));
    }

    // add `goal_target` to the URL query string
    if (getGoalTarget() != null) {
      joiner.add(String.format("%sgoal_target%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalTarget()))));
    }

    // add `goal_target_month` to the URL query string
    if (getGoalTargetMonth() != null) {
      joiner.add(String.format("%sgoal_target_month%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalTargetMonth()))));
    }

    // add `goal_percentage_complete` to the URL query string
    if (getGoalPercentageComplete() != null) {
      joiner.add(String.format("%sgoal_percentage_complete%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalPercentageComplete()))));
    }

    // add `goal_months_to_budget` to the URL query string
    if (getGoalMonthsToBudget() != null) {
      joiner.add(String.format("%sgoal_months_to_budget%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalMonthsToBudget()))));
    }

    // add `goal_under_funded` to the URL query string
    if (getGoalUnderFunded() != null) {
      joiner.add(String.format("%sgoal_under_funded%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalUnderFunded()))));
    }

    // add `goal_overall_funded` to the URL query string
    if (getGoalOverallFunded() != null) {
      joiner.add(String.format("%sgoal_overall_funded%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalOverallFunded()))));
    }

    // add `goal_overall_left` to the URL query string
    if (getGoalOverallLeft() != null) {
      joiner.add(String.format("%sgoal_overall_left%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGoalOverallLeft()))));
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeleted()))));
    }

    return joiner.toString();
  }
}

