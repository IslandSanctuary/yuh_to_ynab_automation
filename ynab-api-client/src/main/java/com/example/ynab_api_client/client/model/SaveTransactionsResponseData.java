/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.example.ynab_api_client.client.model.TransactionDetail;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * SaveTransactionsResponseData
 */
@JsonPropertyOrder({
  SaveTransactionsResponseData.JSON_PROPERTY_TRANSACTION_IDS,
  SaveTransactionsResponseData.JSON_PROPERTY_TRANSACTION,
  SaveTransactionsResponseData.JSON_PROPERTY_TRANSACTIONS,
  SaveTransactionsResponseData.JSON_PROPERTY_DUPLICATE_IMPORT_IDS,
  SaveTransactionsResponseData.JSON_PROPERTY_SERVER_KNOWLEDGE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class SaveTransactionsResponseData {
  public static final String JSON_PROPERTY_TRANSACTION_IDS = "transaction_ids";
  @jakarta.annotation.Nonnull
  private List<String> transactionIds = new ArrayList<>();

  public static final String JSON_PROPERTY_TRANSACTION = "transaction";
  @jakarta.annotation.Nullable
  private TransactionDetail transaction;

  public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
  @jakarta.annotation.Nullable
  private List<TransactionDetail> transactions = new ArrayList<>();

  public static final String JSON_PROPERTY_DUPLICATE_IMPORT_IDS = "duplicate_import_ids";
  @jakarta.annotation.Nullable
  private List<String> duplicateImportIds = new ArrayList<>();

  public static final String JSON_PROPERTY_SERVER_KNOWLEDGE = "server_knowledge";
  @jakarta.annotation.Nonnull
  private Long serverKnowledge;

  public SaveTransactionsResponseData() { 
  }

  public SaveTransactionsResponseData transactionIds(@jakarta.annotation.Nonnull List<String> transactionIds) {
    this.transactionIds = transactionIds;
    return this;
  }

  public SaveTransactionsResponseData addTransactionIdsItem(String transactionIdsItem) {
    if (this.transactionIds == null) {
      this.transactionIds = new ArrayList<>();
    }
    this.transactionIds.add(transactionIdsItem);
    return this;
  }

  /**
   * The transaction ids that were saved
   * @return transactionIds
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSACTION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<String> getTransactionIds() {
    return transactionIds;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionIds(@jakarta.annotation.Nonnull List<String> transactionIds) {
    this.transactionIds = transactionIds;
  }


  public SaveTransactionsResponseData transaction(@jakarta.annotation.Nullable TransactionDetail transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * Get transaction
   * @return transaction
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TransactionDetail getTransaction() {
    return transaction;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransaction(@jakarta.annotation.Nullable TransactionDetail transaction) {
    this.transaction = transaction;
  }


  public SaveTransactionsResponseData transactions(@jakarta.annotation.Nullable List<TransactionDetail> transactions) {
    this.transactions = transactions;
    return this;
  }

  public SaveTransactionsResponseData addTransactionsItem(TransactionDetail transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

  /**
   * If multiple transactions were specified, the transactions that were saved
   * @return transactions
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<TransactionDetail> getTransactions() {
    return transactions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactions(@jakarta.annotation.Nullable List<TransactionDetail> transactions) {
    this.transactions = transactions;
  }


  public SaveTransactionsResponseData duplicateImportIds(@jakarta.annotation.Nullable List<String> duplicateImportIds) {
    this.duplicateImportIds = duplicateImportIds;
    return this;
  }

  public SaveTransactionsResponseData addDuplicateImportIdsItem(String duplicateImportIdsItem) {
    if (this.duplicateImportIds == null) {
      this.duplicateImportIds = new ArrayList<>();
    }
    this.duplicateImportIds.add(duplicateImportIdsItem);
    return this;
  }

  /**
   * If multiple transactions were specified, a list of import_ids that were not created because of an existing &#x60;import_id&#x60; found on the same account
   * @return duplicateImportIds
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUPLICATE_IMPORT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getDuplicateImportIds() {
    return duplicateImportIds;
  }


  @JsonProperty(JSON_PROPERTY_DUPLICATE_IMPORT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDuplicateImportIds(@jakarta.annotation.Nullable List<String> duplicateImportIds) {
    this.duplicateImportIds = duplicateImportIds;
  }


  public SaveTransactionsResponseData serverKnowledge(@jakarta.annotation.Nonnull Long serverKnowledge) {
    this.serverKnowledge = serverKnowledge;
    return this;
  }

  /**
   * The knowledge of the server
   * @return serverKnowledge
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERVER_KNOWLEDGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getServerKnowledge() {
    return serverKnowledge;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_KNOWLEDGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServerKnowledge(@jakarta.annotation.Nonnull Long serverKnowledge) {
    this.serverKnowledge = serverKnowledge;
  }


  /**
   * Return true if this SaveTransactionsResponse_data object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveTransactionsResponseData saveTransactionsResponseData = (SaveTransactionsResponseData) o;
    return Objects.equals(this.transactionIds, saveTransactionsResponseData.transactionIds) &&
        Objects.equals(this.transaction, saveTransactionsResponseData.transaction) &&
        Objects.equals(this.transactions, saveTransactionsResponseData.transactions) &&
        Objects.equals(this.duplicateImportIds, saveTransactionsResponseData.duplicateImportIds) &&
        Objects.equals(this.serverKnowledge, saveTransactionsResponseData.serverKnowledge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionIds, transaction, transactions, duplicateImportIds, serverKnowledge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveTransactionsResponseData {\n");
    sb.append("    transactionIds: ").append(toIndentedString(transactionIds)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    duplicateImportIds: ").append(toIndentedString(duplicateImportIds)).append("\n");
    sb.append("    serverKnowledge: ").append(toIndentedString(serverKnowledge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `transaction_ids` to the URL query string
    if (getTransactionIds() != null) {
      for (int i = 0; i < getTransactionIds().size(); i++) {
        joiner.add(String.format("%stransaction_ids%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getTransactionIds().get(i)))));
      }
    }

    // add `transaction` to the URL query string
    if (getTransaction() != null) {
      joiner.add(getTransaction().toUrlQueryString(prefix + "transaction" + suffix));
    }

    // add `transactions` to the URL query string
    if (getTransactions() != null) {
      for (int i = 0; i < getTransactions().size(); i++) {
        if (getTransactions().get(i) != null) {
          joiner.add(getTransactions().get(i).toUrlQueryString(String.format("%stransactions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `duplicate_import_ids` to the URL query string
    if (getDuplicateImportIds() != null) {
      for (int i = 0; i < getDuplicateImportIds().size(); i++) {
        joiner.add(String.format("%sduplicate_import_ids%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getDuplicateImportIds().get(i)))));
      }
    }

    // add `server_knowledge` to the URL query string
    if (getServerKnowledge() != null) {
      joiner.add(String.format("%sserver_knowledge%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getServerKnowledge()))));
    }

    return joiner.toString();
  }
}

