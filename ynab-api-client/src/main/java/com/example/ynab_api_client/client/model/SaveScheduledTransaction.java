/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.example.ynab_api_client.client.model.ScheduledTransactionFrequency;
import com.example.ynab_api_client.client.model.TransactionFlagColor;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * SaveScheduledTransaction
 */
@JsonPropertyOrder({
  SaveScheduledTransaction.JSON_PROPERTY_ACCOUNT_ID,
  SaveScheduledTransaction.JSON_PROPERTY_DATE,
  SaveScheduledTransaction.JSON_PROPERTY_AMOUNT,
  SaveScheduledTransaction.JSON_PROPERTY_PAYEE_ID,
  SaveScheduledTransaction.JSON_PROPERTY_PAYEE_NAME,
  SaveScheduledTransaction.JSON_PROPERTY_CATEGORY_ID,
  SaveScheduledTransaction.JSON_PROPERTY_MEMO,
  SaveScheduledTransaction.JSON_PROPERTY_FLAG_COLOR,
  SaveScheduledTransaction.JSON_PROPERTY_FREQUENCY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class SaveScheduledTransaction {
  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  @jakarta.annotation.Nonnull
  private UUID accountId;

  public static final String JSON_PROPERTY_DATE = "date";
  @jakarta.annotation.Nonnull
  private LocalDate date;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nullable
  private Long amount;

  public static final String JSON_PROPERTY_PAYEE_ID = "payee_id";
  private JsonNullable<UUID> payeeId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_PAYEE_NAME = "payee_name";
  private JsonNullable<String> payeeName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CATEGORY_ID = "category_id";
  private JsonNullable<UUID> categoryId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_MEMO = "memo";
  private JsonNullable<String> memo = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FLAG_COLOR = "flag_color";
  private JsonNullable<TransactionFlagColor> flagColor = JsonNullable.<TransactionFlagColor>undefined();

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  @jakarta.annotation.Nullable
  private ScheduledTransactionFrequency frequency;

  public SaveScheduledTransaction() { 
  }

  public SaveScheduledTransaction accountId(@jakarta.annotation.Nonnull UUID accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(@jakarta.annotation.Nonnull UUID accountId) {
    this.accountId = accountId;
  }


  public SaveScheduledTransaction date(@jakarta.annotation.Nonnull LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * The scheduled transaction date in ISO format (e.g. 2016-12-01).  This should be a future date no more than 5 years into the future.
   * @return date
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LocalDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(@jakarta.annotation.Nonnull LocalDate date) {
    this.date = date;
  }


  public SaveScheduledTransaction amount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The scheduled transaction amount in milliunits format.
   * @return amount
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
  }


  public SaveScheduledTransaction payeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
    return this;
  }

  /**
   * The payee for the scheduled transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as &#x60;transfer_payee_id&#x60; on the account resource.
   * @return payeeId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getPayeeId() {
        return payeeId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getPayeeId_JsonNullable() {
    return payeeId;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  public void setPayeeId_JsonNullable(JsonNullable<UUID> payeeId) {
    this.payeeId = payeeId;
  }

  public void setPayeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
  }


  public SaveScheduledTransaction payeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
    return this;
  }

  /**
   * The payee name for the the scheduled transaction.  If a &#x60;payee_name&#x60; value is provided and &#x60;payee_id&#x60; has a null value, the &#x60;payee_name&#x60; value will be used to resolve the payee by either (1) a payee with the same name or (2) creation of a new payee.
   * @return payeeName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getPayeeName() {
        return payeeName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPayeeName_JsonNullable() {
    return payeeName;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  public void setPayeeName_JsonNullable(JsonNullable<String> payeeName) {
    this.payeeName = payeeName;
  }

  public void setPayeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
  }


  public SaveScheduledTransaction categoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
    return this;
  }

  /**
   * The category for the scheduled transaction. Credit Card Payment categories are not permitted. Creating a split scheduled transaction is not currently supported.
   * @return categoryId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getCategoryId() {
        return categoryId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getCategoryId_JsonNullable() {
    return categoryId;
  }
  
  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  public void setCategoryId_JsonNullable(JsonNullable<UUID> categoryId) {
    this.categoryId = categoryId;
  }

  public void setCategoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
  }


  public SaveScheduledTransaction memo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getMemo() {
        return memo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMemo_JsonNullable() {
    return memo;
  }
  
  @JsonProperty(JSON_PROPERTY_MEMO)
  public void setMemo_JsonNullable(JsonNullable<String> memo) {
    this.memo = memo;
  }

  public void setMemo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
  }


  public SaveScheduledTransaction flagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
    return this;
  }

  /**
   * Get flagColor
   * @return flagColor
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public TransactionFlagColor getFlagColor() {
        return flagColor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TransactionFlagColor> getFlagColor_JsonNullable() {
    return flagColor;
  }
  
  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  public void setFlagColor_JsonNullable(JsonNullable<TransactionFlagColor> flagColor) {
    this.flagColor = flagColor;
  }

  public void setFlagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
  }


  public SaveScheduledTransaction frequency(@jakarta.annotation.Nullable ScheduledTransactionFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ScheduledTransactionFrequency getFrequency() {
    return frequency;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrequency(@jakarta.annotation.Nullable ScheduledTransactionFrequency frequency) {
    this.frequency = frequency;
  }


  /**
   * Return true if this SaveScheduledTransaction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveScheduledTransaction saveScheduledTransaction = (SaveScheduledTransaction) o;
    return Objects.equals(this.accountId, saveScheduledTransaction.accountId) &&
        Objects.equals(this.date, saveScheduledTransaction.date) &&
        Objects.equals(this.amount, saveScheduledTransaction.amount) &&
        equalsNullable(this.payeeId, saveScheduledTransaction.payeeId) &&
        equalsNullable(this.payeeName, saveScheduledTransaction.payeeName) &&
        equalsNullable(this.categoryId, saveScheduledTransaction.categoryId) &&
        equalsNullable(this.memo, saveScheduledTransaction.memo) &&
        equalsNullable(this.flagColor, saveScheduledTransaction.flagColor) &&
        Objects.equals(this.frequency, saveScheduledTransaction.frequency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, date, amount, hashCodeNullable(payeeId), hashCodeNullable(payeeName), hashCodeNullable(categoryId), hashCodeNullable(memo), hashCodeNullable(flagColor), frequency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveScheduledTransaction {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    flagColor: ").append(toIndentedString(flagColor)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `account_id` to the URL query string
    if (getAccountId() != null) {
      joiner.add(String.format("%saccount_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAccountId()))));
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      joiner.add(String.format("%sdate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDate()))));
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(String.format("%samount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAmount()))));
    }

    // add `payee_id` to the URL query string
    if (getPayeeId() != null) {
      joiner.add(String.format("%spayee_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeId()))));
    }

    // add `payee_name` to the URL query string
    if (getPayeeName() != null) {
      joiner.add(String.format("%spayee_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeName()))));
    }

    // add `category_id` to the URL query string
    if (getCategoryId() != null) {
      joiner.add(String.format("%scategory_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryId()))));
    }

    // add `memo` to the URL query string
    if (getMemo() != null) {
      joiner.add(String.format("%smemo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMemo()))));
    }

    // add `flag_color` to the URL query string
    if (getFlagColor() != null) {
      joiner.add(String.format("%sflag_color%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFlagColor()))));
    }

    // add `frequency` to the URL query string
    if (getFrequency() != null) {
      joiner.add(String.format("%sfrequency%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFrequency()))));
    }

    return joiner.toString();
  }
}

