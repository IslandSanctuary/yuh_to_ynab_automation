/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.ynab_api_client.client.api;

import com.example.ynab_api_client.client.invoker.ApiClient;
import com.example.ynab_api_client.client.invoker.ApiException;
import com.example.ynab_api_client.client.invoker.ApiResponse;
import com.example.ynab_api_client.client.invoker.Configuration;
import com.example.ynab_api_client.client.invoker.Pair;

import com.example.ynab_api_client.client.model.AccountResponse;
import com.example.ynab_api_client.client.model.AccountsResponse;
import com.example.ynab_api_client.client.model.ErrorResponse;
import com.example.ynab_api_client.client.model.PostAccountWrapper;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class AccountsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AccountsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AccountsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a new account
   * Creates a new account
   * @param budgetId The id of the budget (\&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget) (required)
   * @param data The account to create. (required)
   * @return AccountResponse
   * @throws ApiException if fails to make API call
   */
  public AccountResponse createAccount(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull PostAccountWrapper data) throws ApiException {
    ApiResponse<AccountResponse> localVarResponse = createAccountWithHttpInfo(budgetId, data);
    return localVarResponse.getData();
  }

  /**
   * Create a new account
   * Creates a new account
   * @param budgetId The id of the budget (\&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget) (required)
   * @param data The account to create. (required)
   * @return ApiResponse&lt;AccountResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AccountResponse> createAccountWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull PostAccountWrapper data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAccountRequestBuilder(budgetId, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAccount", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<AccountResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<AccountResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<AccountResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAccountRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull PostAccountWrapper data) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling createAccount");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling createAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/accounts"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Single account
   * Returns a single account
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param accountId The id of the account (required)
   * @return AccountResponse
   * @throws ApiException if fails to make API call
   */
  public AccountResponse getAccountById(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull UUID accountId) throws ApiException {
    ApiResponse<AccountResponse> localVarResponse = getAccountByIdWithHttpInfo(budgetId, accountId);
    return localVarResponse.getData();
  }

  /**
   * Single account
   * Returns a single account
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param accountId The id of the account (required)
   * @return ApiResponse&lt;AccountResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AccountResponse> getAccountByIdWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull UUID accountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAccountByIdRequestBuilder(budgetId, accountId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAccountById", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<AccountResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<AccountResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<AccountResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAccountByIdRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull UUID accountId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getAccountById");
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling getAccountById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/accounts/{account_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{account_id}", ApiClient.urlEncode(accountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Account list
   * Returns all accounts
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
   * @return AccountsResponse
   * @throws ApiException if fails to make API call
   */
  public AccountsResponse getAccounts(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    ApiResponse<AccountsResponse> localVarResponse = getAccountsWithHttpInfo(budgetId, lastKnowledgeOfServer);
    return localVarResponse.getData();
  }

  /**
   * Account list
   * Returns all accounts
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
   * @return ApiResponse&lt;AccountsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AccountsResponse> getAccountsWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAccountsRequestBuilder(budgetId, lastKnowledgeOfServer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAccounts", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<AccountsResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<AccountsResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<AccountsResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAccountsRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getAccounts");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/accounts"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "last_knowledge_of_server";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_knowledge_of_server", lastKnowledgeOfServer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
