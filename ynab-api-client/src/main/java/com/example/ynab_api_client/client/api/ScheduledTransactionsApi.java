/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.ynab_api_client.client.api;

import com.example.ynab_api_client.client.invoker.ApiClient;
import com.example.ynab_api_client.client.invoker.ApiException;
import com.example.ynab_api_client.client.invoker.ApiResponse;
import com.example.ynab_api_client.client.invoker.Configuration;
import com.example.ynab_api_client.client.invoker.Pair;

import com.example.ynab_api_client.client.model.ErrorResponse;
import com.example.ynab_api_client.client.model.PostScheduledTransactionWrapper;
import com.example.ynab_api_client.client.model.PutScheduledTransactionWrapper;
import com.example.ynab_api_client.client.model.ScheduledTransactionResponse;
import com.example.ynab_api_client.client.model.ScheduledTransactionsResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class ScheduledTransactionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ScheduledTransactionsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ScheduledTransactionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a single scheduled transaction
   * Creates a single scheduled transaction (a transaction with a future date).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param data The scheduled transaction to create (required)
   * @return ScheduledTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public ScheduledTransactionResponse createScheduledTransaction(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull PostScheduledTransactionWrapper data) throws ApiException {
    ApiResponse<ScheduledTransactionResponse> localVarResponse = createScheduledTransactionWithHttpInfo(budgetId, data);
    return localVarResponse.getData();
  }

  /**
   * Create a single scheduled transaction
   * Creates a single scheduled transaction (a transaction with a future date).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param data The scheduled transaction to create (required)
   * @return ApiResponse&lt;ScheduledTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ScheduledTransactionResponse> createScheduledTransactionWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull PostScheduledTransactionWrapper data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createScheduledTransactionRequestBuilder(budgetId, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createScheduledTransaction", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ScheduledTransactionResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ScheduledTransactionResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ScheduledTransactionResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createScheduledTransactionRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull PostScheduledTransactionWrapper data) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling createScheduledTransaction");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling createScheduledTransaction");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/scheduled_transactions"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes an existing scheduled transaction
   * Deletes a scheduled transaction
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param scheduledTransactionId The id of the scheduled transaction (required)
   * @return ScheduledTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public ScheduledTransactionResponse deleteScheduledTransaction(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId) throws ApiException {
    ApiResponse<ScheduledTransactionResponse> localVarResponse = deleteScheduledTransactionWithHttpInfo(budgetId, scheduledTransactionId);
    return localVarResponse.getData();
  }

  /**
   * Deletes an existing scheduled transaction
   * Deletes a scheduled transaction
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param scheduledTransactionId The id of the scheduled transaction (required)
   * @return ApiResponse&lt;ScheduledTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ScheduledTransactionResponse> deleteScheduledTransactionWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteScheduledTransactionRequestBuilder(budgetId, scheduledTransactionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteScheduledTransaction", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ScheduledTransactionResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ScheduledTransactionResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ScheduledTransactionResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteScheduledTransactionRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling deleteScheduledTransaction");
    }
    // verify the required parameter 'scheduledTransactionId' is set
    if (scheduledTransactionId == null) {
      throw new ApiException(400, "Missing the required parameter 'scheduledTransactionId' when calling deleteScheduledTransaction");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{scheduled_transaction_id}", ApiClient.urlEncode(scheduledTransactionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Single scheduled transaction
   * Returns a single scheduled transaction
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param scheduledTransactionId The id of the scheduled transaction (required)
   * @return ScheduledTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public ScheduledTransactionResponse getScheduledTransactionById(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId) throws ApiException {
    ApiResponse<ScheduledTransactionResponse> localVarResponse = getScheduledTransactionByIdWithHttpInfo(budgetId, scheduledTransactionId);
    return localVarResponse.getData();
  }

  /**
   * Single scheduled transaction
   * Returns a single scheduled transaction
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param scheduledTransactionId The id of the scheduled transaction (required)
   * @return ApiResponse&lt;ScheduledTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ScheduledTransactionResponse> getScheduledTransactionByIdWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getScheduledTransactionByIdRequestBuilder(budgetId, scheduledTransactionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getScheduledTransactionById", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ScheduledTransactionResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ScheduledTransactionResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ScheduledTransactionResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getScheduledTransactionByIdRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getScheduledTransactionById");
    }
    // verify the required parameter 'scheduledTransactionId' is set
    if (scheduledTransactionId == null) {
      throw new ApiException(400, "Missing the required parameter 'scheduledTransactionId' when calling getScheduledTransactionById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{scheduled_transaction_id}", ApiClient.urlEncode(scheduledTransactionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List scheduled transactions
   * Returns all scheduled transactions
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
   * @return ScheduledTransactionsResponse
   * @throws ApiException if fails to make API call
   */
  public ScheduledTransactionsResponse getScheduledTransactions(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    ApiResponse<ScheduledTransactionsResponse> localVarResponse = getScheduledTransactionsWithHttpInfo(budgetId, lastKnowledgeOfServer);
    return localVarResponse.getData();
  }

  /**
   * List scheduled transactions
   * Returns all scheduled transactions
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
   * @return ApiResponse&lt;ScheduledTransactionsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ScheduledTransactionsResponse> getScheduledTransactionsWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getScheduledTransactionsRequestBuilder(budgetId, lastKnowledgeOfServer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getScheduledTransactions", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ScheduledTransactionsResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ScheduledTransactionsResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ScheduledTransactionsResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getScheduledTransactionsRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getScheduledTransactions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/scheduled_transactions"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "last_knowledge_of_server";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_knowledge_of_server", lastKnowledgeOfServer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates an existing scheduled transaction
   * Updates a single scheduled transaction
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param scheduledTransactionId The id of the scheduled transaction (required)
   * @param putScheduledTransactionWrapper The scheduled transaction to update (required)
   * @return ScheduledTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public ScheduledTransactionResponse updateScheduledTransaction(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId, @jakarta.annotation.Nonnull PutScheduledTransactionWrapper putScheduledTransactionWrapper) throws ApiException {
    ApiResponse<ScheduledTransactionResponse> localVarResponse = updateScheduledTransactionWithHttpInfo(budgetId, scheduledTransactionId, putScheduledTransactionWrapper);
    return localVarResponse.getData();
  }

  /**
   * Updates an existing scheduled transaction
   * Updates a single scheduled transaction
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param scheduledTransactionId The id of the scheduled transaction (required)
   * @param putScheduledTransactionWrapper The scheduled transaction to update (required)
   * @return ApiResponse&lt;ScheduledTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ScheduledTransactionResponse> updateScheduledTransactionWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId, @jakarta.annotation.Nonnull PutScheduledTransactionWrapper putScheduledTransactionWrapper) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateScheduledTransactionRequestBuilder(budgetId, scheduledTransactionId, putScheduledTransactionWrapper);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateScheduledTransaction", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ScheduledTransactionResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ScheduledTransactionResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ScheduledTransactionResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateScheduledTransactionRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String scheduledTransactionId, @jakarta.annotation.Nonnull PutScheduledTransactionWrapper putScheduledTransactionWrapper) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling updateScheduledTransaction");
    }
    // verify the required parameter 'scheduledTransactionId' is set
    if (scheduledTransactionId == null) {
      throw new ApiException(400, "Missing the required parameter 'scheduledTransactionId' when calling updateScheduledTransaction");
    }
    // verify the required parameter 'putScheduledTransactionWrapper' is set
    if (putScheduledTransactionWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'putScheduledTransactionWrapper' when calling updateScheduledTransaction");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{scheduled_transaction_id}", ApiClient.urlEncode(scheduledTransactionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(putScheduledTransactionWrapper);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
