/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.ynab_api_client.client.api;

import com.example.ynab_api_client.client.invoker.ApiClient;
import com.example.ynab_api_client.client.invoker.ApiException;
import com.example.ynab_api_client.client.invoker.ApiResponse;
import com.example.ynab_api_client.client.invoker.Configuration;
import com.example.ynab_api_client.client.invoker.Pair;

import com.example.ynab_api_client.client.model.CategoriesResponse;
import com.example.ynab_api_client.client.model.CategoryResponse;
import com.example.ynab_api_client.client.model.ErrorResponse;
import java.time.LocalDate;
import com.example.ynab_api_client.client.model.PatchCategoryWrapper;
import com.example.ynab_api_client.client.model.PatchMonthCategoryWrapper;
import com.example.ynab_api_client.client.model.SaveCategoryResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class CategoriesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CategoriesApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CategoriesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * List categories
   * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
   * @return CategoriesResponse
   * @throws ApiException if fails to make API call
   */
  public CategoriesResponse getCategories(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    ApiResponse<CategoriesResponse> localVarResponse = getCategoriesWithHttpInfo(budgetId, lastKnowledgeOfServer);
    return localVarResponse.getData();
  }

  /**
   * List categories
   * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
   * @return ApiResponse&lt;CategoriesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CategoriesResponse> getCategoriesWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCategoriesRequestBuilder(budgetId, lastKnowledgeOfServer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCategories", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<CategoriesResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<CategoriesResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<CategoriesResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCategoriesRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nullable Long lastKnowledgeOfServer) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getCategories");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/categories"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "last_knowledge_of_server";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_knowledge_of_server", lastKnowledgeOfServer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Single category
   * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param categoryId The id of the category (required)
   * @return CategoryResponse
   * @throws ApiException if fails to make API call
   */
  public CategoryResponse getCategoryById(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String categoryId) throws ApiException {
    ApiResponse<CategoryResponse> localVarResponse = getCategoryByIdWithHttpInfo(budgetId, categoryId);
    return localVarResponse.getData();
  }

  /**
   * Single category
   * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param categoryId The id of the category (required)
   * @return ApiResponse&lt;CategoryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CategoryResponse> getCategoryByIdWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String categoryId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCategoryByIdRequestBuilder(budgetId, categoryId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCategoryById", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<CategoryResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<CategoryResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<CategoryResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCategoryByIdRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String categoryId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getCategoryById");
    }
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'categoryId' when calling getCategoryById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/categories/{category_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{category_id}", ApiClient.urlEncode(categoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Single category for a specific budget month
   * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC)) (required)
   * @param categoryId The id of the category (required)
   * @return CategoryResponse
   * @throws ApiException if fails to make API call
   */
  public CategoryResponse getMonthCategoryById(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull LocalDate month, @jakarta.annotation.Nonnull String categoryId) throws ApiException {
    ApiResponse<CategoryResponse> localVarResponse = getMonthCategoryByIdWithHttpInfo(budgetId, month, categoryId);
    return localVarResponse.getData();
  }

  /**
   * Single category for a specific budget month
   * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC)) (required)
   * @param categoryId The id of the category (required)
   * @return ApiResponse&lt;CategoryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CategoryResponse> getMonthCategoryByIdWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull LocalDate month, @jakarta.annotation.Nonnull String categoryId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMonthCategoryByIdRequestBuilder(budgetId, month, categoryId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMonthCategoryById", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<CategoryResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<CategoryResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<CategoryResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMonthCategoryByIdRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull LocalDate month, @jakarta.annotation.Nonnull String categoryId) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling getMonthCategoryById");
    }
    // verify the required parameter 'month' is set
    if (month == null) {
      throw new ApiException(400, "Missing the required parameter 'month' when calling getMonthCategoryById");
    }
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'categoryId' when calling getMonthCategoryById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/months/{month}/categories/{category_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{month}", ApiClient.urlEncode(month.toString()))
        .replace("{category_id}", ApiClient.urlEncode(categoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a category
   * Update a category
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param categoryId The id of the category (required)
   * @param data The category to update (required)
   * @return SaveCategoryResponse
   * @throws ApiException if fails to make API call
   */
  public SaveCategoryResponse updateCategory(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String categoryId, @jakarta.annotation.Nonnull PatchCategoryWrapper data) throws ApiException {
    ApiResponse<SaveCategoryResponse> localVarResponse = updateCategoryWithHttpInfo(budgetId, categoryId, data);
    return localVarResponse.getData();
  }

  /**
   * Update a category
   * Update a category
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param categoryId The id of the category (required)
   * @param data The category to update (required)
   * @return ApiResponse&lt;SaveCategoryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SaveCategoryResponse> updateCategoryWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String categoryId, @jakarta.annotation.Nonnull PatchCategoryWrapper data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateCategoryRequestBuilder(budgetId, categoryId, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateCategory", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<SaveCategoryResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<SaveCategoryResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<SaveCategoryResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateCategoryRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull String categoryId, @jakarta.annotation.Nonnull PatchCategoryWrapper data) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling updateCategory");
    }
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'categoryId' when calling updateCategory");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling updateCategory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/categories/{category_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{category_id}", ApiClient.urlEncode(categoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a category for a specific month
   * Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC)) (required)
   * @param categoryId The id of the category (required)
   * @param data The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored. (required)
   * @return SaveCategoryResponse
   * @throws ApiException if fails to make API call
   */
  public SaveCategoryResponse updateMonthCategory(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull LocalDate month, @jakarta.annotation.Nonnull String categoryId, @jakarta.annotation.Nonnull PatchMonthCategoryWrapper data) throws ApiException {
    ApiResponse<SaveCategoryResponse> localVarResponse = updateMonthCategoryWithHttpInfo(budgetId, month, categoryId, data);
    return localVarResponse.getData();
  }

  /**
   * Update a category for a specific month
   * Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
   * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
   * @param month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC)) (required)
   * @param categoryId The id of the category (required)
   * @param data The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored. (required)
   * @return ApiResponse&lt;SaveCategoryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SaveCategoryResponse> updateMonthCategoryWithHttpInfo(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull LocalDate month, @jakarta.annotation.Nonnull String categoryId, @jakarta.annotation.Nonnull PatchMonthCategoryWrapper data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateMonthCategoryRequestBuilder(budgetId, month, categoryId, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateMonthCategory", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<SaveCategoryResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<SaveCategoryResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<SaveCategoryResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateMonthCategoryRequestBuilder(@jakarta.annotation.Nonnull String budgetId, @jakarta.annotation.Nonnull LocalDate month, @jakarta.annotation.Nonnull String categoryId, @jakarta.annotation.Nonnull PatchMonthCategoryWrapper data) throws ApiException {
    // verify the required parameter 'budgetId' is set
    if (budgetId == null) {
      throw new ApiException(400, "Missing the required parameter 'budgetId' when calling updateMonthCategory");
    }
    // verify the required parameter 'month' is set
    if (month == null) {
      throw new ApiException(400, "Missing the required parameter 'month' when calling updateMonthCategory");
    }
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'categoryId' when calling updateMonthCategory");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling updateMonthCategory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/budgets/{budget_id}/months/{month}/categories/{category_id}"
        .replace("{budget_id}", ApiClient.urlEncode(budgetId.toString()))
        .replace("{month}", ApiClient.urlEncode(month.toString()))
        .replace("{category_id}", ApiClient.urlEncode(categoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
