/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.example.ynab_api_client.client.model.ScheduledSubTransaction;
import com.example.ynab_api_client.client.model.TransactionFlagColor;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * ScheduledTransactionDetail
 */
@JsonPropertyOrder({
  ScheduledTransactionDetail.JSON_PROPERTY_ID,
  ScheduledTransactionDetail.JSON_PROPERTY_DATE_FIRST,
  ScheduledTransactionDetail.JSON_PROPERTY_DATE_NEXT,
  ScheduledTransactionDetail.JSON_PROPERTY_FREQUENCY,
  ScheduledTransactionDetail.JSON_PROPERTY_AMOUNT,
  ScheduledTransactionDetail.JSON_PROPERTY_MEMO,
  ScheduledTransactionDetail.JSON_PROPERTY_FLAG_COLOR,
  ScheduledTransactionDetail.JSON_PROPERTY_FLAG_NAME,
  ScheduledTransactionDetail.JSON_PROPERTY_ACCOUNT_ID,
  ScheduledTransactionDetail.JSON_PROPERTY_PAYEE_ID,
  ScheduledTransactionDetail.JSON_PROPERTY_CATEGORY_ID,
  ScheduledTransactionDetail.JSON_PROPERTY_TRANSFER_ACCOUNT_ID,
  ScheduledTransactionDetail.JSON_PROPERTY_DELETED,
  ScheduledTransactionDetail.JSON_PROPERTY_ACCOUNT_NAME,
  ScheduledTransactionDetail.JSON_PROPERTY_PAYEE_NAME,
  ScheduledTransactionDetail.JSON_PROPERTY_CATEGORY_NAME,
  ScheduledTransactionDetail.JSON_PROPERTY_SUBTRANSACTIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class ScheduledTransactionDetail {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_DATE_FIRST = "date_first";
  @jakarta.annotation.Nonnull
  private LocalDate dateFirst;

  public static final String JSON_PROPERTY_DATE_NEXT = "date_next";
  @jakarta.annotation.Nonnull
  private LocalDate dateNext;

  /**
   * Gets or Sets frequency
   */
  public enum FrequencyEnum {
    NEVER(String.valueOf("never")),
    
    DAILY(String.valueOf("daily")),
    
    WEEKLY(String.valueOf("weekly")),
    
    EVERY_OTHER_WEEK(String.valueOf("everyOtherWeek")),
    
    TWICE_A_MONTH(String.valueOf("twiceAMonth")),
    
    EVERY4_WEEKS(String.valueOf("every4Weeks")),
    
    MONTHLY(String.valueOf("monthly")),
    
    EVERY_OTHER_MONTH(String.valueOf("everyOtherMonth")),
    
    EVERY3_MONTHS(String.valueOf("every3Months")),
    
    EVERY4_MONTHS(String.valueOf("every4Months")),
    
    TWICE_A_YEAR(String.valueOf("twiceAYear")),
    
    YEARLY(String.valueOf("yearly")),
    
    EVERY_OTHER_YEAR(String.valueOf("everyOtherYear"));

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  @jakarta.annotation.Nonnull
  private FrequencyEnum frequency;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nonnull
  private Long amount;

  public static final String JSON_PROPERTY_MEMO = "memo";
  private JsonNullable<String> memo = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FLAG_COLOR = "flag_color";
  private JsonNullable<TransactionFlagColor> flagColor = JsonNullable.<TransactionFlagColor>undefined();

  public static final String JSON_PROPERTY_FLAG_NAME = "flag_name";
  private JsonNullable<String> flagName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  @jakarta.annotation.Nonnull
  private UUID accountId;

  public static final String JSON_PROPERTY_PAYEE_ID = "payee_id";
  private JsonNullable<UUID> payeeId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_CATEGORY_ID = "category_id";
  private JsonNullable<UUID> categoryId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_TRANSFER_ACCOUNT_ID = "transfer_account_id";
  private JsonNullable<UUID> transferAccountId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @jakarta.annotation.Nonnull
  private Boolean deleted;

  public static final String JSON_PROPERTY_ACCOUNT_NAME = "account_name";
  @jakarta.annotation.Nonnull
  private String accountName;

  public static final String JSON_PROPERTY_PAYEE_NAME = "payee_name";
  private JsonNullable<String> payeeName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CATEGORY_NAME = "category_name";
  private JsonNullable<String> categoryName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SUBTRANSACTIONS = "subtransactions";
  @jakarta.annotation.Nonnull
  private List<ScheduledSubTransaction> subtransactions = new ArrayList<>();

  public ScheduledTransactionDetail() { 
  }

  public ScheduledTransactionDetail id(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public ScheduledTransactionDetail dateFirst(@jakarta.annotation.Nonnull LocalDate dateFirst) {
    this.dateFirst = dateFirst;
    return this;
  }

  /**
   * The first date for which the Scheduled Transaction was scheduled.
   * @return dateFirst
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE_FIRST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LocalDate getDateFirst() {
    return dateFirst;
  }


  @JsonProperty(JSON_PROPERTY_DATE_FIRST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateFirst(@jakarta.annotation.Nonnull LocalDate dateFirst) {
    this.dateFirst = dateFirst;
  }


  public ScheduledTransactionDetail dateNext(@jakarta.annotation.Nonnull LocalDate dateNext) {
    this.dateNext = dateNext;
    return this;
  }

  /**
   * The next date for which the Scheduled Transaction is scheduled.
   * @return dateNext
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE_NEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public LocalDate getDateNext() {
    return dateNext;
  }


  @JsonProperty(JSON_PROPERTY_DATE_NEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateNext(@jakarta.annotation.Nonnull LocalDate dateNext) {
    this.dateNext = dateNext;
  }


  public ScheduledTransactionDetail frequency(@jakarta.annotation.Nonnull FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public FrequencyEnum getFrequency() {
    return frequency;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrequency(@jakarta.annotation.Nonnull FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public ScheduledTransactionDetail amount(@jakarta.annotation.Nonnull Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The scheduled transaction amount in milliunits format
   * @return amount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(@jakarta.annotation.Nonnull Long amount) {
    this.amount = amount;
  }


  public ScheduledTransactionDetail memo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getMemo() {
        return memo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMemo_JsonNullable() {
    return memo;
  }
  
  @JsonProperty(JSON_PROPERTY_MEMO)
  public void setMemo_JsonNullable(JsonNullable<String> memo) {
    this.memo = memo;
  }

  public void setMemo(@jakarta.annotation.Nullable String memo) {
    this.memo = JsonNullable.<String>of(memo);
  }


  public ScheduledTransactionDetail flagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
    return this;
  }

  /**
   * Get flagColor
   * @return flagColor
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public TransactionFlagColor getFlagColor() {
        return flagColor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TransactionFlagColor> getFlagColor_JsonNullable() {
    return flagColor;
  }
  
  @JsonProperty(JSON_PROPERTY_FLAG_COLOR)
  public void setFlagColor_JsonNullable(JsonNullable<TransactionFlagColor> flagColor) {
    this.flagColor = flagColor;
  }

  public void setFlagColor(@jakarta.annotation.Nullable TransactionFlagColor flagColor) {
    this.flagColor = JsonNullable.<TransactionFlagColor>of(flagColor);
  }


  public ScheduledTransactionDetail flagName(@jakarta.annotation.Nullable String flagName) {
    this.flagName = JsonNullable.<String>of(flagName);
    return this;
  }

  /**
   * The customized name of a transaction flag
   * @return flagName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getFlagName() {
        return flagName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FLAG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFlagName_JsonNullable() {
    return flagName;
  }
  
  @JsonProperty(JSON_PROPERTY_FLAG_NAME)
  public void setFlagName_JsonNullable(JsonNullable<String> flagName) {
    this.flagName = flagName;
  }

  public void setFlagName(@jakarta.annotation.Nullable String flagName) {
    this.flagName = JsonNullable.<String>of(flagName);
  }


  public ScheduledTransactionDetail accountId(@jakarta.annotation.Nonnull UUID accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(@jakarta.annotation.Nonnull UUID accountId) {
    this.accountId = accountId;
  }


  public ScheduledTransactionDetail payeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
    return this;
  }

  /**
   * Get payeeId
   * @return payeeId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getPayeeId() {
        return payeeId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getPayeeId_JsonNullable() {
    return payeeId;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_ID)
  public void setPayeeId_JsonNullable(JsonNullable<UUID> payeeId) {
    this.payeeId = payeeId;
  }

  public void setPayeeId(@jakarta.annotation.Nullable UUID payeeId) {
    this.payeeId = JsonNullable.<UUID>of(payeeId);
  }


  public ScheduledTransactionDetail categoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getCategoryId() {
        return categoryId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getCategoryId_JsonNullable() {
    return categoryId;
  }
  
  @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
  public void setCategoryId_JsonNullable(JsonNullable<UUID> categoryId) {
    this.categoryId = categoryId;
  }

  public void setCategoryId(@jakarta.annotation.Nullable UUID categoryId) {
    this.categoryId = JsonNullable.<UUID>of(categoryId);
  }


  public ScheduledTransactionDetail transferAccountId(@jakarta.annotation.Nullable UUID transferAccountId) {
    this.transferAccountId = JsonNullable.<UUID>of(transferAccountId);
    return this;
  }

  /**
   * If a transfer, the account_id which the scheduled transaction transfers to
   * @return transferAccountId
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public UUID getTransferAccountId() {
        return transferAccountId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSFER_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getTransferAccountId_JsonNullable() {
    return transferAccountId;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSFER_ACCOUNT_ID)
  public void setTransferAccountId_JsonNullable(JsonNullable<UUID> transferAccountId) {
    this.transferAccountId = transferAccountId;
  }

  public void setTransferAccountId(@jakarta.annotation.Nullable UUID transferAccountId) {
    this.transferAccountId = JsonNullable.<UUID>of(transferAccountId);
  }


  public ScheduledTransactionDetail deleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
   * @return deleted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }


  public ScheduledTransactionDetail accountName(@jakarta.annotation.Nonnull String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getAccountName() {
    return accountName;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountName(@jakarta.annotation.Nonnull String accountName) {
    this.accountName = accountName;
  }


  public ScheduledTransactionDetail payeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
    return this;
  }

  /**
   * Get payeeName
   * @return payeeName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getPayeeName() {
        return payeeName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPayeeName_JsonNullable() {
    return payeeName;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYEE_NAME)
  public void setPayeeName_JsonNullable(JsonNullable<String> payeeName) {
    this.payeeName = payeeName;
  }

  public void setPayeeName(@jakarta.annotation.Nullable String payeeName) {
    this.payeeName = JsonNullable.<String>of(payeeName);
  }


  public ScheduledTransactionDetail categoryName(@jakarta.annotation.Nullable String categoryName) {
    this.categoryName = JsonNullable.<String>of(categoryName);
    return this;
  }

  /**
   * The name of the category.  If a split scheduled transaction, this will be &#39;Split&#39;.
   * @return categoryName
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getCategoryName() {
        return categoryName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCategoryName_JsonNullable() {
    return categoryName;
  }
  
  @JsonProperty(JSON_PROPERTY_CATEGORY_NAME)
  public void setCategoryName_JsonNullable(JsonNullable<String> categoryName) {
    this.categoryName = categoryName;
  }

  public void setCategoryName(@jakarta.annotation.Nullable String categoryName) {
    this.categoryName = JsonNullable.<String>of(categoryName);
  }


  public ScheduledTransactionDetail subtransactions(@jakarta.annotation.Nonnull List<ScheduledSubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
    return this;
  }

  public ScheduledTransactionDetail addSubtransactionsItem(ScheduledSubTransaction subtransactionsItem) {
    if (this.subtransactions == null) {
      this.subtransactions = new ArrayList<>();
    }
    this.subtransactions.add(subtransactionsItem);
    return this;
  }

  /**
   * If a split scheduled transaction, the subtransactions.
   * @return subtransactions
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUBTRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<ScheduledSubTransaction> getSubtransactions() {
    return subtransactions;
  }


  @JsonProperty(JSON_PROPERTY_SUBTRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubtransactions(@jakarta.annotation.Nonnull List<ScheduledSubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
  }


  /**
   * Return true if this ScheduledTransactionDetail object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledTransactionDetail scheduledTransactionDetail = (ScheduledTransactionDetail) o;
    return Objects.equals(this.id, scheduledTransactionDetail.id) &&
        Objects.equals(this.dateFirst, scheduledTransactionDetail.dateFirst) &&
        Objects.equals(this.dateNext, scheduledTransactionDetail.dateNext) &&
        Objects.equals(this.frequency, scheduledTransactionDetail.frequency) &&
        Objects.equals(this.amount, scheduledTransactionDetail.amount) &&
        equalsNullable(this.memo, scheduledTransactionDetail.memo) &&
        equalsNullable(this.flagColor, scheduledTransactionDetail.flagColor) &&
        equalsNullable(this.flagName, scheduledTransactionDetail.flagName) &&
        Objects.equals(this.accountId, scheduledTransactionDetail.accountId) &&
        equalsNullable(this.payeeId, scheduledTransactionDetail.payeeId) &&
        equalsNullable(this.categoryId, scheduledTransactionDetail.categoryId) &&
        equalsNullable(this.transferAccountId, scheduledTransactionDetail.transferAccountId) &&
        Objects.equals(this.deleted, scheduledTransactionDetail.deleted) &&
        Objects.equals(this.accountName, scheduledTransactionDetail.accountName) &&
        equalsNullable(this.payeeName, scheduledTransactionDetail.payeeName) &&
        equalsNullable(this.categoryName, scheduledTransactionDetail.categoryName) &&
        Objects.equals(this.subtransactions, scheduledTransactionDetail.subtransactions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dateFirst, dateNext, frequency, amount, hashCodeNullable(memo), hashCodeNullable(flagColor), hashCodeNullable(flagName), accountId, hashCodeNullable(payeeId), hashCodeNullable(categoryId), hashCodeNullable(transferAccountId), deleted, accountName, hashCodeNullable(payeeName), hashCodeNullable(categoryName), subtransactions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledTransactionDetail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dateFirst: ").append(toIndentedString(dateFirst)).append("\n");
    sb.append("    dateNext: ").append(toIndentedString(dateNext)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    flagColor: ").append(toIndentedString(flagColor)).append("\n");
    sb.append("    flagName: ").append(toIndentedString(flagName)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    transferAccountId: ").append(toIndentedString(transferAccountId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    subtransactions: ").append(toIndentedString(subtransactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `date_first` to the URL query string
    if (getDateFirst() != null) {
      joiner.add(String.format("%sdate_first%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDateFirst()))));
    }

    // add `date_next` to the URL query string
    if (getDateNext() != null) {
      joiner.add(String.format("%sdate_next%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDateNext()))));
    }

    // add `frequency` to the URL query string
    if (getFrequency() != null) {
      joiner.add(String.format("%sfrequency%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFrequency()))));
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(String.format("%samount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAmount()))));
    }

    // add `memo` to the URL query string
    if (getMemo() != null) {
      joiner.add(String.format("%smemo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMemo()))));
    }

    // add `flag_color` to the URL query string
    if (getFlagColor() != null) {
      joiner.add(String.format("%sflag_color%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFlagColor()))));
    }

    // add `flag_name` to the URL query string
    if (getFlagName() != null) {
      joiner.add(String.format("%sflag_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFlagName()))));
    }

    // add `account_id` to the URL query string
    if (getAccountId() != null) {
      joiner.add(String.format("%saccount_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAccountId()))));
    }

    // add `payee_id` to the URL query string
    if (getPayeeId() != null) {
      joiner.add(String.format("%spayee_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeId()))));
    }

    // add `category_id` to the URL query string
    if (getCategoryId() != null) {
      joiner.add(String.format("%scategory_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryId()))));
    }

    // add `transfer_account_id` to the URL query string
    if (getTransferAccountId() != null) {
      joiner.add(String.format("%stransfer_account_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTransferAccountId()))));
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeleted()))));
    }

    // add `account_name` to the URL query string
    if (getAccountName() != null) {
      joiner.add(String.format("%saccount_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAccountName()))));
    }

    // add `payee_name` to the URL query string
    if (getPayeeName() != null) {
      joiner.add(String.format("%spayee_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPayeeName()))));
    }

    // add `category_name` to the URL query string
    if (getCategoryName() != null) {
      joiner.add(String.format("%scategory_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCategoryName()))));
    }

    // add `subtransactions` to the URL query string
    if (getSubtransactions() != null) {
      for (int i = 0; i < getSubtransactions().size(); i++) {
        if (getSubtransactions().get(i) != null) {
          joiner.add(getSubtransactions().get(i).toUrlQueryString(String.format("%ssubtransactions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

