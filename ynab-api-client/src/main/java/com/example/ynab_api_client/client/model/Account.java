/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.example.ynab_api_client.client.model.AccountType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.example.ynab_api_client.client.invoker.ApiClient;
/**
 * Account
 */
@JsonPropertyOrder({
  Account.JSON_PROPERTY_ID,
  Account.JSON_PROPERTY_NAME,
  Account.JSON_PROPERTY_TYPE,
  Account.JSON_PROPERTY_ON_BUDGET,
  Account.JSON_PROPERTY_CLOSED,
  Account.JSON_PROPERTY_NOTE,
  Account.JSON_PROPERTY_BALANCE,
  Account.JSON_PROPERTY_CLEARED_BALANCE,
  Account.JSON_PROPERTY_UNCLEARED_BALANCE,
  Account.JSON_PROPERTY_TRANSFER_PAYEE_ID,
  Account.JSON_PROPERTY_DIRECT_IMPORT_LINKED,
  Account.JSON_PROPERTY_DIRECT_IMPORT_IN_ERROR,
  Account.JSON_PROPERTY_LAST_RECONCILED_AT,
  Account.JSON_PROPERTY_DEBT_ORIGINAL_BALANCE,
  Account.JSON_PROPERTY_DEBT_INTEREST_RATES,
  Account.JSON_PROPERTY_DEBT_MINIMUM_PAYMENTS,
  Account.JSON_PROPERTY_DEBT_ESCROW_AMOUNTS,
  Account.JSON_PROPERTY_DELETED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T21:45:22.500220+02:00[Europe/Zurich]", comments = "Generator version: 7.14.0")
public class Account {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nonnull
  private AccountType type;

  public static final String JSON_PROPERTY_ON_BUDGET = "on_budget";
  @jakarta.annotation.Nonnull
  private Boolean onBudget;

  public static final String JSON_PROPERTY_CLOSED = "closed";
  @jakarta.annotation.Nonnull
  private Boolean closed;

  public static final String JSON_PROPERTY_NOTE = "note";
  private JsonNullable<String> note = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BALANCE = "balance";
  @jakarta.annotation.Nonnull
  private Long balance;

  public static final String JSON_PROPERTY_CLEARED_BALANCE = "cleared_balance";
  @jakarta.annotation.Nonnull
  private Long clearedBalance;

  public static final String JSON_PROPERTY_UNCLEARED_BALANCE = "uncleared_balance";
  @jakarta.annotation.Nonnull
  private Long unclearedBalance;

  public static final String JSON_PROPERTY_TRANSFER_PAYEE_ID = "transfer_payee_id";
  @jakarta.annotation.Nullable
  private UUID transferPayeeId;

  public static final String JSON_PROPERTY_DIRECT_IMPORT_LINKED = "direct_import_linked";
  @jakarta.annotation.Nullable
  private Boolean directImportLinked;

  public static final String JSON_PROPERTY_DIRECT_IMPORT_IN_ERROR = "direct_import_in_error";
  @jakarta.annotation.Nullable
  private Boolean directImportInError;

  public static final String JSON_PROPERTY_LAST_RECONCILED_AT = "last_reconciled_at";
  private JsonNullable<OffsetDateTime> lastReconciledAt = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_DEBT_ORIGINAL_BALANCE = "debt_original_balance";
  private JsonNullable<Long> debtOriginalBalance = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_DEBT_INTEREST_RATES = "debt_interest_rates";
  private JsonNullable<Map<String, Long>> debtInterestRates = JsonNullable.<Map<String, Long>>undefined();

  public static final String JSON_PROPERTY_DEBT_MINIMUM_PAYMENTS = "debt_minimum_payments";
  private JsonNullable<Map<String, Long>> debtMinimumPayments = JsonNullable.<Map<String, Long>>undefined();

  public static final String JSON_PROPERTY_DEBT_ESCROW_AMOUNTS = "debt_escrow_amounts";
  private JsonNullable<Map<String, Long>> debtEscrowAmounts = JsonNullable.<Map<String, Long>>undefined();

  public static final String JSON_PROPERTY_DELETED = "deleted";
  @jakarta.annotation.Nonnull
  private Boolean deleted;

  public Account() { 
  }

  public Account id(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public Account name(@jakarta.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }


  public Account type(@jakarta.annotation.Nonnull AccountType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public AccountType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@jakarta.annotation.Nonnull AccountType type) {
    this.type = type;
  }


  public Account onBudget(@jakarta.annotation.Nonnull Boolean onBudget) {
    this.onBudget = onBudget;
    return this;
  }

  /**
   * Whether this account is on budget or not
   * @return onBudget
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ON_BUDGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getOnBudget() {
    return onBudget;
  }


  @JsonProperty(JSON_PROPERTY_ON_BUDGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOnBudget(@jakarta.annotation.Nonnull Boolean onBudget) {
    this.onBudget = onBudget;
  }


  public Account closed(@jakarta.annotation.Nonnull Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Whether this account is closed or not
   * @return closed
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getClosed() {
    return closed;
  }


  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClosed(@jakarta.annotation.Nonnull Boolean closed) {
    this.closed = closed;
  }


  public Account note(@jakarta.annotation.Nullable String note) {
    this.note = JsonNullable.<String>of(note);
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getNote() {
        return note.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getNote_JsonNullable() {
    return note;
  }
  
  @JsonProperty(JSON_PROPERTY_NOTE)
  public void setNote_JsonNullable(JsonNullable<String> note) {
    this.note = note;
  }

  public void setNote(@jakarta.annotation.Nullable String note) {
    this.note = JsonNullable.<String>of(note);
  }


  public Account balance(@jakarta.annotation.Nonnull Long balance) {
    this.balance = balance;
    return this;
  }

  /**
   * The current balance of the account in milliunits format
   * @return balance
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getBalance() {
    return balance;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBalance(@jakarta.annotation.Nonnull Long balance) {
    this.balance = balance;
  }


  public Account clearedBalance(@jakarta.annotation.Nonnull Long clearedBalance) {
    this.clearedBalance = clearedBalance;
    return this;
  }

  /**
   * The current cleared balance of the account in milliunits format
   * @return clearedBalance
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLEARED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getClearedBalance() {
    return clearedBalance;
  }


  @JsonProperty(JSON_PROPERTY_CLEARED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClearedBalance(@jakarta.annotation.Nonnull Long clearedBalance) {
    this.clearedBalance = clearedBalance;
  }


  public Account unclearedBalance(@jakarta.annotation.Nonnull Long unclearedBalance) {
    this.unclearedBalance = unclearedBalance;
    return this;
  }

  /**
   * The current uncleared balance of the account in milliunits format
   * @return unclearedBalance
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNCLEARED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getUnclearedBalance() {
    return unclearedBalance;
  }


  @JsonProperty(JSON_PROPERTY_UNCLEARED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnclearedBalance(@jakarta.annotation.Nonnull Long unclearedBalance) {
    this.unclearedBalance = unclearedBalance;
  }


  public Account transferPayeeId(@jakarta.annotation.Nullable UUID transferPayeeId) {
    this.transferPayeeId = transferPayeeId;
    return this;
  }

  /**
   * The payee id which should be used when transferring to this account
   * @return transferPayeeId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSFER_PAYEE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTransferPayeeId() {
    return transferPayeeId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFER_PAYEE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransferPayeeId(@jakarta.annotation.Nullable UUID transferPayeeId) {
    this.transferPayeeId = transferPayeeId;
  }


  public Account directImportLinked(@jakarta.annotation.Nullable Boolean directImportLinked) {
    this.directImportLinked = directImportLinked;
    return this;
  }

  /**
   * Whether or not the account is linked to a financial institution for automatic transaction import.
   * @return directImportLinked
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_IMPORT_LINKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDirectImportLinked() {
    return directImportLinked;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_IMPORT_LINKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectImportLinked(@jakarta.annotation.Nullable Boolean directImportLinked) {
    this.directImportLinked = directImportLinked;
  }


  public Account directImportInError(@jakarta.annotation.Nullable Boolean directImportInError) {
    this.directImportInError = directImportInError;
    return this;
  }

  /**
   * If an account linked to a financial institution (direct_import_linked&#x3D;true) and the linked connection is not in a healthy state, this will be true.
   * @return directImportInError
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_IMPORT_IN_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDirectImportInError() {
    return directImportInError;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_IMPORT_IN_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectImportInError(@jakarta.annotation.Nullable Boolean directImportInError) {
    this.directImportInError = directImportInError;
  }


  public Account lastReconciledAt(@jakarta.annotation.Nullable OffsetDateTime lastReconciledAt) {
    this.lastReconciledAt = JsonNullable.<OffsetDateTime>of(lastReconciledAt);
    return this;
  }

  /**
   * A date/time specifying when the account was last reconciled.
   * @return lastReconciledAt
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public OffsetDateTime getLastReconciledAt() {
        return lastReconciledAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LAST_RECONCILED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getLastReconciledAt_JsonNullable() {
    return lastReconciledAt;
  }
  
  @JsonProperty(JSON_PROPERTY_LAST_RECONCILED_AT)
  public void setLastReconciledAt_JsonNullable(JsonNullable<OffsetDateTime> lastReconciledAt) {
    this.lastReconciledAt = lastReconciledAt;
  }

  public void setLastReconciledAt(@jakarta.annotation.Nullable OffsetDateTime lastReconciledAt) {
    this.lastReconciledAt = JsonNullable.<OffsetDateTime>of(lastReconciledAt);
  }


  public Account debtOriginalBalance(@jakarta.annotation.Nullable Long debtOriginalBalance) {
    this.debtOriginalBalance = JsonNullable.<Long>of(debtOriginalBalance);
    return this;
  }

  /**
   * The original debt/loan account balance, specified in milliunits format.
   * @return debtOriginalBalance
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Long getDebtOriginalBalance() {
        return debtOriginalBalance.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEBT_ORIGINAL_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getDebtOriginalBalance_JsonNullable() {
    return debtOriginalBalance;
  }
  
  @JsonProperty(JSON_PROPERTY_DEBT_ORIGINAL_BALANCE)
  public void setDebtOriginalBalance_JsonNullable(JsonNullable<Long> debtOriginalBalance) {
    this.debtOriginalBalance = debtOriginalBalance;
  }

  public void setDebtOriginalBalance(@jakarta.annotation.Nullable Long debtOriginalBalance) {
    this.debtOriginalBalance = JsonNullable.<Long>of(debtOriginalBalance);
  }


  public Account debtInterestRates(@jakarta.annotation.Nullable Map<String, Long> debtInterestRates) {
    this.debtInterestRates = JsonNullable.<Map<String, Long>>of(debtInterestRates);
    return this;
  }

  public Account putDebtInterestRatesItem(String key, Long debtInterestRatesItem) {
    if (this.debtInterestRates == null || !this.debtInterestRates.isPresent()) {
      this.debtInterestRates = JsonNullable.<Map<String, Long>>of(new HashMap<>());
    }
    try {
      this.debtInterestRates.get().put(key, debtInterestRatesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get debtInterestRates
   * @return debtInterestRates
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Map<String, Long> getDebtInterestRates() {
        return debtInterestRates.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEBT_INTEREST_RATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, Long>> getDebtInterestRates_JsonNullable() {
    return debtInterestRates;
  }
  
  @JsonProperty(JSON_PROPERTY_DEBT_INTEREST_RATES)
  public void setDebtInterestRates_JsonNullable(JsonNullable<Map<String, Long>> debtInterestRates) {
    this.debtInterestRates = debtInterestRates;
  }

  public void setDebtInterestRates(@jakarta.annotation.Nullable Map<String, Long> debtInterestRates) {
    this.debtInterestRates = JsonNullable.<Map<String, Long>>of(debtInterestRates);
  }


  public Account debtMinimumPayments(@jakarta.annotation.Nullable Map<String, Long> debtMinimumPayments) {
    this.debtMinimumPayments = JsonNullable.<Map<String, Long>>of(debtMinimumPayments);
    return this;
  }

  public Account putDebtMinimumPaymentsItem(String key, Long debtMinimumPaymentsItem) {
    if (this.debtMinimumPayments == null || !this.debtMinimumPayments.isPresent()) {
      this.debtMinimumPayments = JsonNullable.<Map<String, Long>>of(new HashMap<>());
    }
    try {
      this.debtMinimumPayments.get().put(key, debtMinimumPaymentsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get debtMinimumPayments
   * @return debtMinimumPayments
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Map<String, Long> getDebtMinimumPayments() {
        return debtMinimumPayments.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEBT_MINIMUM_PAYMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, Long>> getDebtMinimumPayments_JsonNullable() {
    return debtMinimumPayments;
  }
  
  @JsonProperty(JSON_PROPERTY_DEBT_MINIMUM_PAYMENTS)
  public void setDebtMinimumPayments_JsonNullable(JsonNullable<Map<String, Long>> debtMinimumPayments) {
    this.debtMinimumPayments = debtMinimumPayments;
  }

  public void setDebtMinimumPayments(@jakarta.annotation.Nullable Map<String, Long> debtMinimumPayments) {
    this.debtMinimumPayments = JsonNullable.<Map<String, Long>>of(debtMinimumPayments);
  }


  public Account debtEscrowAmounts(@jakarta.annotation.Nullable Map<String, Long> debtEscrowAmounts) {
    this.debtEscrowAmounts = JsonNullable.<Map<String, Long>>of(debtEscrowAmounts);
    return this;
  }

  public Account putDebtEscrowAmountsItem(String key, Long debtEscrowAmountsItem) {
    if (this.debtEscrowAmounts == null || !this.debtEscrowAmounts.isPresent()) {
      this.debtEscrowAmounts = JsonNullable.<Map<String, Long>>of(new HashMap<>());
    }
    try {
      this.debtEscrowAmounts.get().put(key, debtEscrowAmountsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get debtEscrowAmounts
   * @return debtEscrowAmounts
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Map<String, Long> getDebtEscrowAmounts() {
        return debtEscrowAmounts.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEBT_ESCROW_AMOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, Long>> getDebtEscrowAmounts_JsonNullable() {
    return debtEscrowAmounts;
  }
  
  @JsonProperty(JSON_PROPERTY_DEBT_ESCROW_AMOUNTS)
  public void setDebtEscrowAmounts_JsonNullable(JsonNullable<Map<String, Long>> debtEscrowAmounts) {
    this.debtEscrowAmounts = debtEscrowAmounts;
  }

  public void setDebtEscrowAmounts(@jakarta.annotation.Nullable Map<String, Long> debtEscrowAmounts) {
    this.debtEscrowAmounts = JsonNullable.<Map<String, Long>>of(debtEscrowAmounts);
  }


  public Account deleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
   * @return deleted
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getDeleted() {
    return deleted;
  }


  @JsonProperty(JSON_PROPERTY_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeleted(@jakarta.annotation.Nonnull Boolean deleted) {
    this.deleted = deleted;
  }


  /**
   * Return true if this Account object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.id, account.id) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.type, account.type) &&
        Objects.equals(this.onBudget, account.onBudget) &&
        Objects.equals(this.closed, account.closed) &&
        equalsNullable(this.note, account.note) &&
        Objects.equals(this.balance, account.balance) &&
        Objects.equals(this.clearedBalance, account.clearedBalance) &&
        Objects.equals(this.unclearedBalance, account.unclearedBalance) &&
        Objects.equals(this.transferPayeeId, account.transferPayeeId) &&
        Objects.equals(this.directImportLinked, account.directImportLinked) &&
        Objects.equals(this.directImportInError, account.directImportInError) &&
        equalsNullable(this.lastReconciledAt, account.lastReconciledAt) &&
        equalsNullable(this.debtOriginalBalance, account.debtOriginalBalance) &&
        equalsNullable(this.debtInterestRates, account.debtInterestRates) &&
        equalsNullable(this.debtMinimumPayments, account.debtMinimumPayments) &&
        equalsNullable(this.debtEscrowAmounts, account.debtEscrowAmounts) &&
        Objects.equals(this.deleted, account.deleted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, onBudget, closed, hashCodeNullable(note), balance, clearedBalance, unclearedBalance, transferPayeeId, directImportLinked, directImportInError, hashCodeNullable(lastReconciledAt), hashCodeNullable(debtOriginalBalance), hashCodeNullable(debtInterestRates), hashCodeNullable(debtMinimumPayments), hashCodeNullable(debtEscrowAmounts), deleted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    onBudget: ").append(toIndentedString(onBudget)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    clearedBalance: ").append(toIndentedString(clearedBalance)).append("\n");
    sb.append("    unclearedBalance: ").append(toIndentedString(unclearedBalance)).append("\n");
    sb.append("    transferPayeeId: ").append(toIndentedString(transferPayeeId)).append("\n");
    sb.append("    directImportLinked: ").append(toIndentedString(directImportLinked)).append("\n");
    sb.append("    directImportInError: ").append(toIndentedString(directImportInError)).append("\n");
    sb.append("    lastReconciledAt: ").append(toIndentedString(lastReconciledAt)).append("\n");
    sb.append("    debtOriginalBalance: ").append(toIndentedString(debtOriginalBalance)).append("\n");
    sb.append("    debtInterestRates: ").append(toIndentedString(debtInterestRates)).append("\n");
    sb.append("    debtMinimumPayments: ").append(toIndentedString(debtMinimumPayments)).append("\n");
    sb.append("    debtEscrowAmounts: ").append(toIndentedString(debtEscrowAmounts)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `on_budget` to the URL query string
    if (getOnBudget() != null) {
      joiner.add(String.format("%son_budget%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOnBudget()))));
    }

    // add `closed` to the URL query string
    if (getClosed() != null) {
      joiner.add(String.format("%sclosed%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getClosed()))));
    }

    // add `note` to the URL query string
    if (getNote() != null) {
      joiner.add(String.format("%snote%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNote()))));
    }

    // add `balance` to the URL query string
    if (getBalance() != null) {
      joiner.add(String.format("%sbalance%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBalance()))));
    }

    // add `cleared_balance` to the URL query string
    if (getClearedBalance() != null) {
      joiner.add(String.format("%scleared_balance%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getClearedBalance()))));
    }

    // add `uncleared_balance` to the URL query string
    if (getUnclearedBalance() != null) {
      joiner.add(String.format("%suncleared_balance%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUnclearedBalance()))));
    }

    // add `transfer_payee_id` to the URL query string
    if (getTransferPayeeId() != null) {
      joiner.add(String.format("%stransfer_payee_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTransferPayeeId()))));
    }

    // add `direct_import_linked` to the URL query string
    if (getDirectImportLinked() != null) {
      joiner.add(String.format("%sdirect_import_linked%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDirectImportLinked()))));
    }

    // add `direct_import_in_error` to the URL query string
    if (getDirectImportInError() != null) {
      joiner.add(String.format("%sdirect_import_in_error%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDirectImportInError()))));
    }

    // add `last_reconciled_at` to the URL query string
    if (getLastReconciledAt() != null) {
      joiner.add(String.format("%slast_reconciled_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLastReconciledAt()))));
    }

    // add `debt_original_balance` to the URL query string
    if (getDebtOriginalBalance() != null) {
      joiner.add(String.format("%sdebt_original_balance%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDebtOriginalBalance()))));
    }

    // add `debt_interest_rates` to the URL query string
    if (getDebtInterestRates() != null) {
      for (String _key : getDebtInterestRates().keySet()) {
        joiner.add(String.format("%sdebt_interest_rates%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getDebtInterestRates().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getDebtInterestRates().get(_key)))));
      }
    }

    // add `debt_minimum_payments` to the URL query string
    if (getDebtMinimumPayments() != null) {
      for (String _key : getDebtMinimumPayments().keySet()) {
        joiner.add(String.format("%sdebt_minimum_payments%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getDebtMinimumPayments().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getDebtMinimumPayments().get(_key)))));
      }
    }

    // add `debt_escrow_amounts` to the URL query string
    if (getDebtEscrowAmounts() != null) {
      for (String _key : getDebtEscrowAmounts().keySet()) {
        joiner.add(String.format("%sdebt_escrow_amounts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getDebtEscrowAmounts().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getDebtEscrowAmounts().get(_key)))));
      }
    }

    // add `deleted` to the URL query string
    if (getDeleted() != null) {
      joiner.add(String.format("%sdeleted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeleted()))));
    }

    return joiner.toString();
  }
}

