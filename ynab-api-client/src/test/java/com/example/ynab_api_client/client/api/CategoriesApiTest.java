/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.75.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.ynab_api_client.client.api;

import com.example.ynab_api_client.client.invoker.ApiException;
import com.example.ynab_api_client.client.model.CategoriesResponse;
import com.example.ynab_api_client.client.model.CategoryResponse;
import com.example.ynab_api_client.client.model.ErrorResponse;
import java.time.LocalDate;
import com.example.ynab_api_client.client.model.PatchCategoryWrapper;
import com.example.ynab_api_client.client.model.PatchMonthCategoryWrapper;
import com.example.ynab_api_client.client.model.SaveCategoryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for CategoriesApi
 */
@Disabled
public class CategoriesApiTest {

    private final CategoriesApi api = new CategoriesApi();

    
    /**
     * List categories
     *
     * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoriesTest() throws ApiException {
        String budgetId = null;
        Long lastKnowledgeOfServer = null;
        CategoriesResponse response = 
        api.getCategories(budgetId, lastKnowledgeOfServer);
        
        // TODO: test validations
    }
    
    /**
     * Single category
     *
     * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoryByIdTest() throws ApiException {
        String budgetId = null;
        String categoryId = null;
        CategoryResponse response = 
        api.getCategoryById(budgetId, categoryId);
        
        // TODO: test validations
    }
    
    /**
     * Single category for a specific budget month
     *
     * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMonthCategoryByIdTest() throws ApiException {
        String budgetId = null;
        LocalDate month = null;
        String categoryId = null;
        CategoryResponse response = 
        api.getMonthCategoryById(budgetId, month, categoryId);
        
        // TODO: test validations
    }
    
    /**
     * Update a category
     *
     * Update a category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCategoryTest() throws ApiException {
        String budgetId = null;
        String categoryId = null;
        PatchCategoryWrapper data = null;
        SaveCategoryResponse response = 
        api.updateCategory(budgetId, categoryId, data);
        
        // TODO: test validations
    }
    
    /**
     * Update a category for a specific month
     *
     * Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMonthCategoryTest() throws ApiException {
        String budgetId = null;
        LocalDate month = null;
        String categoryId = null;
        PatchMonthCategoryWrapper data = null;
        SaveCategoryResponse response = 
        api.updateMonthCategory(budgetId, month, categoryId, data);
        
        // TODO: test validations
    }
    
}
